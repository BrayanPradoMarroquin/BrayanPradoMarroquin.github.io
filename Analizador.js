/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[5,10,14,22,24,102,103,104,105,106,107],$Vb=[1,28],$Vc=[1,31],$Vd=[1,29],$Ve=[1,30],$Vf=[22,32],$Vg=[2,84],$Vh=[1,38],$Vi=[1,37],$Vj=[1,50],$Vk=[1,49],$Vl=[1,46],$Vm=[1,42],$Vn=[1,47],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,48],$Vs=[1,53],$Vt=[1,51],$Vu=[1,52],$Vv=[1,63],$Vw=[5,10,14,16,20,22,24,30,44,46,49,51,55,56,57,61,62,63,64,65,75,76,77,78,84,85,86,88,92,101,102,103,104,105,106,107],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[13,17,30,33,50,87,88,89,90,91,93,94,95,96,97,98,99,100],$VL=[2,119],$VM=[1,86],$VN=[17,30],$VO=[1,102],$VP=[13,17,30,33,50,98,99],$VQ=[20,30],$VR=[1,161],$VS=[1,157],$VT=[1,158],$VU=[1,160],$VV=[1,159],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[1,144],$V_=[1,145],$V$=[13,17,30,33,50,87,88,93,94,95,96,97,98,99,100],$V01=[13,17,30,33,50,93,94,95,96,97,98,99,100],$V11=[20,22,24,44,46,49,51,55,56,57,61,62,63,64,65,102,103,104,105,106,107],$V21=[5,10,14,20,22,24,44,46,49,51,55,56,57,61,62,63,64,65,102,103,104,105,106,107],$V31=[1,230],$V41=[20,49,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"instrucciones":6,"MFBody":7,"MainBody":8,"Dec_Var":9,"Dec_Vect":10,"Dec_Struct":11,"LLamada":12,"TK_PYC":13,"TK_VOID":14,"TK_MAIN":15,"PARENTESIS_ABRE":16,"PARENTESIS_CIERRA":17,"LlaveAbre":18,"Instructions":19,"LlaveCierra":20,"Tipos":21,"IDENTIFICADOR":22,"Params":23,"TK_STRUCT":24,"BodyStruct":25,"IGUAL":26,"TK_PUNTO":27,"Expresiones":28,"s":29,"TK_COMA":30,"parametros":31,"COR_ABRE":32,"COR_CIERRA":33,"cuerpo":34,"Imprimir":35,"SentenciasControl":36,"SentenciasCiclicas":37,"SentenciasTransferencias":38,"ControlIF":39,"CSwitch":40,"If":41,"IfElse":42,"ElseIf":43,"TK_IF":44,"TK_ELSE":45,"TK_SWITCH":46,"ListCase":47,"Default":48,"TK_CASE":49,"TK_DOSPUNTS":50,"TK_DEFAULT":51,"While":52,"For":53,"DoWhile":54,"TK_WHILE":55,"TK_DO":56,"TK_FOR":57,"Actualizacion":58,"INCREMENTO":59,"DECREMENTO":60,"TK_BREAK":61,"TK_RETURN":62,"TK_CONTINUE":63,"TK_PRINT":64,"TK_PRINTLN":65,"Dec_Vec":66,"tipos":67,"valVec":68,"OP_VECOTRES":69,"TK_PUSH":70,"paramV":71,"TK_POP":72,"TK_LENGTH":73,"opVector":74,"ENTERO":75,"CADENA":76,"DECI":77,"CARACTER":78,"operacionesA":79,"TK_SENO":80,"TK_COSENO":81,"TK_TANGENTE":82,"TK_LOGARITMOB10":83,"TRUE":84,"FALSE":85,"NULL":86,"OP_SUMA":87,"OP_MENOS":88,"OP_DIVISION":89,"OP_MULTIPLICACION":90,"OP_MODULO":91,"TK_POW":92,"IGUALIGUAL":93,"MENOR":94,"MENORIGUAL":95,"MAYOR":96,"MAYORIGUAL":97,"OR":98,"AND":99,"DIFERENTEA":100,"NOT":101,"STRING":102,"INT":103,"DOUBLE":104,"CHAR":105,"FLOAT":106,"BOOLEAN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"Dec_Vect",13:"TK_PYC",14:"TK_VOID",15:"TK_MAIN",16:"PARENTESIS_ABRE",17:"PARENTESIS_CIERRA",18:"LlaveAbre",20:"LlaveCierra",22:"IDENTIFICADOR",24:"TK_STRUCT",26:"IGUAL",27:"TK_PUNTO",30:"TK_COMA",32:"COR_ABRE",33:"COR_CIERRA",44:"TK_IF",45:"TK_ELSE",46:"TK_SWITCH",49:"TK_CASE",50:"TK_DOSPUNTS",51:"TK_DEFAULT",55:"TK_WHILE",56:"TK_DO",57:"TK_FOR",59:"INCREMENTO",60:"DECREMENTO",61:"TK_BREAK",62:"TK_RETURN",63:"TK_CONTINUE",64:"TK_PRINT",65:"TK_PRINTLN",67:"tipos",69:"OP_VECOTRES",70:"TK_PUSH",72:"TK_POP",73:"TK_LENGTH",75:"ENTERO",76:"CADENA",77:"DECI",78:"CARACTER",79:"operacionesA",80:"TK_SENO",81:"TK_COSENO",82:"TK_TANGENTE",83:"TK_LOGARITMOB10",84:"TRUE",85:"FALSE",86:"NULL",87:"OP_SUMA",88:"OP_MENOS",89:"OP_DIVISION",90:"OP_MULTIPLICACION",91:"OP_MODULO",92:"TK_POW",93:"IGUALIGUAL",94:"MENOR",95:"MENORIGUAL",96:"MAYOR",97:"MAYORIGUAL",98:"OR",99:"AND",100:"DIFERENTEA",101:"NOT",102:"STRING",103:"INT",104:"DOUBLE",105:"CHAR",106:"FLOAT",107:"BOOLEAN"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,7],[7,7],[7,8],[7,7],[7,8],[11,6],[11,8],[11,7],[11,6],[25,1],[25,3],[29,1],[29,2],[23,1],[23,3],[31,4],[31,2],[31,2],[31,1],[19,2],[19,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[36,1],[36,1],[39,1],[39,1],[39,1],[41,7],[41,6],[42,11],[42,10],[42,10],[42,9],[43,9],[43,8],[40,8],[40,7],[40,7],[47,5],[47,4],[47,4],[47,3],[48,3],[48,2],[37,1],[37,1],[37,1],[52,7],[52,6],[54,9],[54,8],[53,10],[53,9],[58,3],[58,2],[58,2],[38,2],[38,2],[38,2],[38,3],[35,5],[35,5],[9,5],[9,3],[9,4],[9,3],[9,3],[9,2],[9,7],[66,9],[66,8],[66,8],[66,7],[66,6],[66,6],[66,6],[68,1],[68,1],[68,1],[68,1],[68,3],[68,3],[68,3],[68,3],[71,1],[71,1],[71,1],[71,1],[74,3],[74,6],[74,6],[74,6],[74,6],[12,4],[12,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,6],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,4],[28,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]); return $$[$0-1]; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:$V0,11:9,12:10,14:$V1,21:11,22:$V2,24:$V3,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{1:[3]},{5:[1,21],6:22,7:5,8:6,9:7,10:$V0,11:9,12:10,14:$V1,21:11,22:$V2,24:$V3,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{5:[1,23]},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{13:[1,24]},{22:[1,25]},{15:[1,27],22:[1,26]},{16:[1,34],22:[1,32],26:$Vb,27:[1,33],32:$Vc,59:$Vd,60:$Ve},{22:[1,35]},o($Vf,[2,138]),o($Vf,[2,139]),o($Vf,[2,140]),o($Vf,[2,141]),o($Vf,[2,142]),o($Vf,[2,143]),{1:[2,1]},o($Va,[2,3]),{1:[2,2]},o($Va,[2,10]),o($Va,$Vg,{13:$Vh,16:[1,36],26:$Vi}),{16:[1,39]},{16:[1,40]},{16:$Vj,22:$Vk,28:41,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{13:[1,54]},{13:[1,55]},{16:$Vj,22:$Vk,28:56,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{26:[1,57]},{22:[1,58]},{16:$Vj,17:[1,60],21:62,22:$Vv,23:59,28:64,31:61,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{18:[1,65]},{16:$Vj,17:[1,66],21:62,22:$Vv,23:67,28:64,31:61,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{16:$Vj,22:$Vk,28:68,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},o($Vw,[2,80]),{16:$Vj,17:[1,69],21:62,22:$Vv,23:70,28:64,31:61,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{17:[1,71]},{13:[1,72],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($VK,[2,112]),o($VK,[2,113]),o($VK,[2,114]),o($VK,[2,115]),o($VK,[2,116]),o($VK,[2,117]),o($VK,[2,118]),o($VK,$VL,{32:$VM}),{16:$Vj,22:$Vk,28:87,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:[1,88]},{16:$Vj,22:$Vk,28:89,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:90,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},o($Vw,[2,82]),o($Vw,[2,83]),{33:[1,91],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{22:[1,92]},{26:[1,93]},{17:[1,94]},{13:[2,111]},{17:[2,24],30:[1,95]},{22:[1,97],32:[1,96]},o([17,30,87,88,89,90,91,93,94,95,96,97,98,99,100],$VL,{22:[1,98],32:$VM}),o($VN,[2,29],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ}),{9:101,21:103,22:$VO,25:99,29:100,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{18:[1,104]},{17:[1,105]},{13:[1,106],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{18:[1,107]},{17:[1,108]},{18:[1,109]},o($Vw,[2,81]),{16:$Vj,22:$Vk,28:110,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:111,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:112,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:113,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:114,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:115,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:116,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:117,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:118,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:119,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:120,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:121,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:122,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:123,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{17:[1,124],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{16:$Vj,22:$Vk,28:125,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},o($VP,[2,135],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,100:$VJ}),o($VK,[2,137]),{26:[1,126]},{16:[1,127]},{16:$Vj,22:$Vk,28:128,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{13:[2,110]},{16:$Vj,21:62,22:$Vv,23:129,28:64,31:61,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{33:[1,130]},o($VN,[2,27]),o($VN,[2,28]),{20:[1,131]},{20:[2,20],30:[1,132]},o($VQ,[2,22]),{22:[1,133],26:$Vb,32:$Vc,59:$Vd,60:$Ve},{22:[1,134]},{9:137,11:142,12:143,19:135,21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{18:[1,162]},o($Vw,[2,79]),{9:137,11:142,12:143,19:163,21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{18:[1,164]},{9:137,11:142,12:143,19:165,21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V$,[2,121],{89:$Vz,90:$VA,91:$VB}),o($V$,[2,122],{89:$Vz,90:$VA,91:$VB}),o($VK,[2,123]),o($VK,[2,124]),o($VK,[2,125]),o($V01,[2,127],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($V01,[2,128],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($V01,[2,129],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($V01,[2,130],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o($V01,[2,131],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),o([13,17,30,33,50,98],[2,132],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,99:$VI,100:$VJ}),o($VP,[2,133],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,100:$VJ}),o($V01,[2,134],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB}),{33:[1,166],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($VK,[2,120]),{30:[1,167],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{16:$Vj,22:$Vk,28:168,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,17:[1,170],21:62,22:$Vv,23:169,28:64,31:61,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{13:[1,171],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{17:[2,25]},{22:[1,172]},{13:[1,173]},{9:101,21:103,22:$VO,25:174,29:100,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($VQ,[2,23]),o([16,20,22,24,30,44,46,49,51,55,56,57,61,62,63,64,65,75,76,77,78,84,85,86,88,92,101,102,103,104,105,106,107],$Vg,{13:$Vh,26:$Vi}),{9:137,11:142,12:143,20:[1,175],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,31]),o($V11,[2,32]),o($V11,[2,33]),o($V11,[2,34]),o($V11,[2,35]),o($V11,[2,36]),o($V11,[2,37]),{13:[1,177]},{16:[1,178]},{16:[1,179]},o($V11,[2,39]),o($V11,[2,40]),o($V11,[2,61]),o($V11,[2,62]),o($V11,[2,63]),{13:[1,180]},{13:[1,181],16:$Vj,22:$Vk,28:182,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{13:[1,183]},o($V11,[2,41]),o($V11,[2,42]),o($V11,[2,43]),{16:[1,184]},{16:[1,185]},{16:[1,186]},{18:[1,187]},{16:[1,188]},{9:137,11:142,12:143,19:189,21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{9:137,11:142,12:143,20:[1,190],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{9:137,11:142,12:143,19:191,21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{9:137,11:142,12:143,20:[1,192],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($VK,[2,136]),{16:$Vj,22:$Vk,28:193,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{13:[1,194],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{17:[1,195]},{13:[1,196]},o($V21,[2,19]),o($VN,[2,26]),o($V21,[2,16]),{20:[2,21]},o($Va,[2,12]),o($V11,[2,30]),o($V11,[2,38]),{16:$Vj,22:$Vk,28:197,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:198,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},o($V11,[2,73]),o($V11,[2,74]),{13:[1,199],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($V11,[2,75]),{16:$Vj,22:$Vk,28:200,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{16:$Vj,22:$Vk,28:201,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{9:202,21:103,22:[1,203],102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{9:137,11:142,12:143,19:204,20:[1,205],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{16:$Vj,22:$Vk,28:206,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{9:137,11:142,12:143,20:[1,207],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($Va,[2,14]),{9:137,11:142,12:143,20:[1,208],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($Va,[2,11]),{17:[1,209],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($Vw,[2,85]),{13:[1,210]},o($V21,[2,18]),{17:[1,211],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{17:[1,212],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($V11,[2,76]),{17:[1,213],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{17:[1,214],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{16:$Vj,22:$Vk,28:215,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{26:$Vb,32:$Vc,59:$Vd,60:$Ve},{9:137,11:142,12:143,20:[1,216],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{55:[1,217]},{17:[1,218],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($Va,[2,13]),o($Va,[2,15]),o($VK,[2,126]),o($V21,[2,17]),{13:[1,219]},{13:[1,220]},{18:[1,221]},{18:[1,222]},{13:[1,223],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{55:[1,224]},{16:[1,225]},{18:[1,226]},o($V11,[2,77]),o($V11,[2,78]),{47:227,48:228,49:[1,229],51:$V31},{9:137,11:142,12:143,19:231,20:[1,232],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{22:[1,234],58:233},{16:[1,235]},{16:$Vj,22:$Vk,28:236,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{9:137,11:142,12:143,19:237,20:[1,238],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{20:[1,240],48:239,49:[1,241],51:$V31},{20:[1,242]},{16:$Vj,22:$Vk,28:243,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{50:[1,244]},{9:137,11:142,12:143,20:[1,245],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,65]),{17:[1,246]},{26:[1,247],59:[1,248],60:[1,249]},{16:$Vj,22:$Vk,28:250,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{17:[1,251],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{9:137,11:142,12:143,20:[1,252],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,45],{45:[1,253]}),{20:[1,254]},o($V11,[2,53]),{16:$Vj,22:$Vk,28:255,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},o($V11,[2,54]),{50:[1,256],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{9:137,11:142,12:143,19:257,20:[2,60],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,64]),{18:[1,258]},{16:$Vj,22:$Vk,28:259,75:$Vl,76:$Vm,77:$Vn,78:$Vo,84:$Vp,85:$Vq,86:$Vr,88:$Vs,92:$Vt,101:$Vu},{17:[2,71]},{17:[2,72]},{17:[1,260],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{13:[1,261]},o($V11,[2,44],{45:[1,262]}),{18:[1,263],39:264,41:154,42:155,43:156,44:$VR},o($V11,[2,52]),{50:[1,265],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},o($V41,[2,58],{21:103,34:136,9:137,35:138,36:139,37:140,38:141,11:142,12:143,39:146,40:147,52:148,53:149,54:150,41:154,42:155,43:156,19:266,22:$V2,24:$V3,44:$VR,46:$VS,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9}),{9:137,11:142,12:143,20:[2,59],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{9:137,11:142,12:143,19:267,20:[1,268],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},{17:[2,70],87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ},{13:[1,269]},o($V11,[2,67]),{18:[1,270],39:271,41:154,42:155,43:156,44:$VR},{9:137,11:142,12:143,19:272,20:[1,273],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,51]),o($V41,[2,56],{21:103,34:136,9:137,35:138,36:139,37:140,38:141,11:142,12:143,39:146,40:147,52:148,53:149,54:150,41:154,42:155,43:156,19:274,22:$V2,24:$V3,44:$VR,46:$VS,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9}),o($V41,[2,57],{21:103,9:137,35:138,36:139,37:140,38:141,11:142,12:143,39:146,40:147,52:148,53:149,54:150,41:154,42:155,43:156,34:176,22:$V2,24:$V3,44:$VR,46:$VS,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9}),{9:137,11:142,12:143,20:[1,275],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,69]),o($V11,[2,66]),{9:137,11:142,12:143,19:276,20:[1,277],21:103,22:$V2,24:$V3,34:136,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,50]),{9:137,11:142,12:143,20:[1,278],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,49]),o($V41,[2,55],{21:103,9:137,35:138,36:139,37:140,38:141,11:142,12:143,39:146,40:147,52:148,53:149,54:150,41:154,42:155,43:156,34:176,22:$V2,24:$V3,44:$VR,46:$VS,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9}),o($V11,[2,68]),{9:137,11:142,12:143,20:[1,279],21:103,22:$V2,24:$V3,34:176,35:138,36:139,37:140,38:141,39:146,40:147,41:154,42:155,43:156,44:$VR,46:$VS,52:148,53:149,54:150,55:$VT,56:$VU,57:$VV,61:$VW,62:$VX,63:$VY,64:$VZ,65:$V_,102:$V4,103:$V5,104:$V6,105:$V7,106:$V8,107:$V9},o($V11,[2,48]),o($V11,[2,47]),o($V11,[2,46])],
defaultActions: {21:[2,1],23:[2,2],60:[2,111],94:[2,110],129:[2,25],174:[2,21],248:[2,71],249:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentarios de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 104
break;
case 4:return 103
break;
case 5:return 107
break;
case 6:return 105
break;
case 7:return 106
break;
case 8:return 102
break;
case 9:return 86
break;
case 10:return 44
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 49
break;
case 14:return 61
break;
case 15:return 51
break;
case 16:return 55
break;
case 17:return 57
break;
case 18:return 56
break;
case 19:return 63
break;
case 20:return 62
break;
case 21:return 14
break;
case 22:return 15
break;
case 23:return 59
break;
case 24:return 60
break;
case 25:return 'IN'
break;
case 26:return 92
break;
case 27:return 'TK_SQRT'
break;
case 28:return 80
break;
case 29:return 81
break;
case 30:return 82
break;
case 31:return 83
break;
case 32:return 84
break;
case 33:return 85
break;
case 34:return 98
break;
case 35:return 99
break;
case 36:return 100
break;
case 37:return 93
break;
case 38:return 101
break;
case 39:return 26
break;
case 40:return 95
break;
case 41:return 97
break;
case 42:return 96
break;
case 43:return 94
break;
case 44:return 'CONCATENADOCADENA'
break;
case 45:return "OPERACIONESALIMPRIMIR"
break;
case 46:return "OP_VECOTRES"
break;
case 47:return 30
break;
case 48:return 13
break;
case 49:return 27
break;
case 50:return 50
break;
case 51:return 90
break;
case 52:return 89
break;
case 53:return 88
break;
case 54:return 87
break;
case 55:return 'OP_EXPONENTE'
break;
case 56:return 91
break;
case 57:return 'OP_TERNARIO'
break;
case 58:return 16
break;
case 59:return 17
break;
case 60:return 18
break;
case 61:return 20
break;
case 62:return 32
break;
case 63:return 33
break;
case 64:return 'TK_CARACTEROFPOSITION'
break;
case 65:return 'TK_SUBSTRING'
break;
case 66:return 'TK_TOLOWER'
break;
case 67:return 'TK_TOUPPER'
break;
case 68:return 73
break;
case 69:return 64
break;
case 70:return 65
break;
case 71:return 'TK_PARSE'
break;
case 72:return 'TK_TOINT'
break;
case 73:return 'TK_TODOUBLE'
break;
case 74:return 'TK_STRINGPARSE'
break;
case 75:return 'TK_TYPEOF'
break;
case 76:return 24
break;
case 77:return 'TK_BEGIN'
break;
case 78:return 'TK_END'
break;
case 79:return 70
break;
case 80:return 72
break;
case 81:return 'TK_FUNCTION'
break;
case 82:return 22
break;
case 83:return 78
break;
case 84:return 77
break;
case 85:return 75
break;
case 86: cadena = ''; this.begin("string"); 
break;
case 87: cadena += yy_.yytext; 
break;
case 88: cadena += "\""; 
break;
case 89: cadena += "\n"; 
break;
case 90: cadena += " ";  
break;
case 91: cadena += "\t"; 
break;
case 92: cadena += "\\"; 
break;
case 93: cadena += "\'"; 
break;
case 94: cadena += "\r"; 
break;
case 95: yy_.yytext = cadena; this.popState(); return 76; 
break;
case 96:return 5
break;
case 97: errores.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:double\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:String\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&)/,/^(?:\$)/,/^(?:#)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:length\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:\\r)/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[87,88,89,90,91,92,93,94,95],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}