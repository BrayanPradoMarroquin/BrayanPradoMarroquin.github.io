/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[5,12,24,42,102,103,104,105,106,107],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,30],$Vf=[5,12,20,24,32,34,42,102,103,104,105,106,107],$Vg=[1,34],$Vh=[1,31],$Vi=[23,24,83],$Vj=[5,12,18,20,21,24,31,32,34,42,54,59,69,70,71,102,103,104,105,106,107],$Vk=[5,12,18,20,24,32,34,42,54,59,69,70,71,102,103,104,105,106,107],$Vl=[1,46],$Vm=[1,45],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,58],$Vu=[1,69],$Vv=[5,12,15,18,20,21,24,32,34,39,42,54,59,69,70,71,102,103,104,105,106,107],$Vw=[1,99],$Vx=[1,105],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,120],$VE=[1,116],$VF=[1,121],$VG=[1,117],$VH=[1,118],$VI=[1,132],$VJ=[1,145],$VK=[1,141],$VL=[1,142],$VM=[1,144],$VN=[1,143],$VO=[5,12,15,21,24,42,102,103,104,105,106,107],$VP=[1,181],$VQ=[18,20,24,32,34,54,59,69,70,71,102,103,104,105,106,107],$VR=[1,205],$VS=[1,204],$VT=[1,206],$VU=[1,207],$VV=[1,228],$VW=[1,239],$VX=[2,172],$VY=[1,257],$VZ=[1,258],$V_=[1,260],$V$=[1,259],$V01=[1,261],$V11=[1,262],$V21=[1,263],$V31=[1,264],$V41=[12,18,20,24,32,34,54,57,59,64,69,70,71,102,103,104,105,106,107],$V51=[1,336],$V61=[18,62,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"instrucciones":6,"Mainbody":7,"FuncionesMetodos":8,"Dec_Var":9,"Dec_Vec":10,"Dec_Structs":11,"TK_VOID":12,"TK_MAIN":13,"PARENTESIS_ABRE":14,"PARENTESIS_CIERRA":15,"LlaveAbre":16,"cuerpomain":17,"LlaveCierra":18,"imprimir":19,"TK_RETURN":20,"TK_PYC":21,"tipos":22,"TK_FUNCTION":23,"IDENTIFICADOR":24,"cuerpoFunction":25,"listaparametros":26,"cuerpoMetodo":27,"LlamadaMF":28,"SentenciasControl":29,"SentenciasCiclicas":30,"TK_COMA":31,"TK_PRINT":32,"impresion":33,"TK_PRINTLN":34,"CADENA":35,"ENTERO":36,"DECI":37,"CARACTER":38,"OP_SUMA":39,"IGUAL":40,"cadvar":41,"TK_STRUCT":42,"listatributos":43,"params":44,"TK_PUNTO":45,"NULL":46,"TRUE":47,"FALSE":48,"ControlIF":49,"ControlSwitch":50,"if":51,"ifelse":52,"elseif":53,"TK_IF":54,"condiciones":55,"instIf":56,"TK_ELSE":57,"IGUALIGUAL":58,"TK_SWITCH":59,"Caselist":60,"listDefault":61,"TK_CASE":62,"TK_DOSPUNTS":63,"TK_BREAK":64,"TK_DEFAULT":65,"Cwhile":66,"Cfor":67,"Cdowhile":68,"TK_WHILE":69,"TK_DO":70,"TK_FOR":71,"condicionesFor":72,"IN":73,"condicionFor":74,"actualizacion":75,"MAYOR":76,"MENOR":77,"DIFERENTEA":78,"MENORIGUAL":79,"MAYORIGUAL":80,"INCREMENTO":81,"DECREMENTO":82,"COR_ABRE":83,"COR_CIERRA":84,"valVec":85,"OP_VECOTRES":86,"TK_PUSH":87,"paramV":88,"TK_POP":89,"TK_LENGTH":90,"opVector":91,"operacionesA":92,"TK_SENO":93,"TK_COSENO":94,"TK_TANGENTE":95,"TK_LOGARITMOB10":96,"OP_MENOS":97,"OP_MULTIPLICACION":98,"OP_DIVISION":99,"OP_EXPONENTE":100,"OP_MODULO":101,"STRING":102,"INT":103,"DOUBLE":104,"CHAR":105,"FLOAT":106,"BOOLEAN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"TK_VOID",13:"TK_MAIN",14:"PARENTESIS_ABRE",15:"PARENTESIS_CIERRA",16:"LlaveAbre",18:"LlaveCierra",20:"TK_RETURN",21:"TK_PYC",23:"TK_FUNCTION",24:"IDENTIFICADOR",31:"TK_COMA",32:"TK_PRINT",34:"TK_PRINTLN",35:"CADENA",36:"ENTERO",37:"DECI",38:"CARACTER",39:"OP_SUMA",40:"IGUAL",42:"TK_STRUCT",45:"TK_PUNTO",46:"NULL",47:"TRUE",48:"FALSE",54:"TK_IF",57:"TK_ELSE",58:"IGUALIGUAL",59:"TK_SWITCH",62:"TK_CASE",63:"TK_DOSPUNTS",64:"TK_BREAK",65:"TK_DEFAULT",69:"TK_WHILE",70:"TK_DO",71:"TK_FOR",73:"IN",76:"MAYOR",77:"MENOR",78:"DIFERENTEA",79:"MENORIGUAL",80:"MAYORIGUAL",81:"INCREMENTO",82:"DECREMENTO",83:"COR_ABRE",84:"COR_CIERRA",86:"OP_VECOTRES",87:"TK_PUSH",89:"TK_POP",90:"TK_LENGTH",93:"TK_SENO",94:"TK_COSENO",95:"TK_TANGENTE",96:"TK_LOGARITMOB10",97:"OP_MENOS",98:"OP_MULTIPLICACION",99:"OP_DIVISION",100:"OP_EXPONENTE",101:"OP_MODULO",102:"STRING",103:"INT",104:"DOUBLE",105:"CHAR",106:"FLOAT",107:"BOOLEAN"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[17,2],[17,2],[17,2],[17,2],[8,8],[8,9],[8,8],[8,9],[8,10],[8,9],[8,1],[25,1],[25,6],[25,5],[25,4],[25,5],[25,1],[25,1],[25,1],[25,1],[25,2],[25,7],[25,6],[25,5],[25,6],[25,2],[25,2],[25,2],[25,2],[26,2],[26,4],[26,1],[26,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[27,2],[19,5],[19,4],[19,5],[19,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[9,5],[9,4],[9,3],[9,4],[9,3],[9,2],[41,1],[41,3],[11,6],[11,8],[11,6],[11,5],[11,6],[43,2],[43,4],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[28,5],[28,4],[28,3],[28,4],[29,1],[29,1],[49,1],[49,1],[49,1],[51,7],[51,6],[51,5],[52,11],[52,10],[52,10],[52,9],[52,7],[53,9],[53,8],[53,7],[55,3],[56,1],[50,8],[50,7],[50,7],[60,7],[60,6],[60,6],[60,5],[61,3],[61,2],[30,1],[30,1],[30,1],[66,7],[68,9],[67,7],[67,7],[67,7],[72,4],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[75,2],[75,2],[10,9],[10,8],[10,7],[10,6],[10,6],[10,6],[85,1],[85,1],[85,1],[85,1],[85,3],[85,3],[85,3],[85,3],[88,1],[88,1],[88,1],[88,1],[91,3],[91,6],[91,6],[91,6],[91,6],[92,1],[92,1],[92,2],[92,2],[92,2],[92,2],[92,2],[92,2],[92,0],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]); return $$[$0-1]; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:$V0,22:11,24:$V1,28:12,42:$V2,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{1:[3]},{5:[1,21],6:22,7:5,8:6,9:7,10:8,11:9,12:$V0,22:11,24:$V1,28:12,42:$V2,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{5:[1,23]},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{13:[1,24],23:$Va,24:$Vb},{23:$Vc,24:$Vd,41:29,83:$Ve},o($Vf,[2,21]),{14:$Vg,24:[1,33],40:$Vh,45:[1,32]},{24:[1,35]},o($Vi,[2,173]),o($Vi,[2,174]),o($Vi,[2,175]),o($Vi,[2,176]),o($Vi,[2,177]),o($Vi,[2,178]),{1:[2,1]},o($V9,[2,3]),{1:[2,2]},{14:[1,36]},{24:[1,37]},{14:[1,38]},{24:[1,39]},o($Vj,[2,70],{40:[1,40]}),o($Vk,[2,69],{21:[1,41],31:[1,42]}),{84:[1,43]},{24:$Vl,33:44,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:[1,53],87:$Vq,89:$Vr,90:$Vs},{40:[1,54]},{15:[1,56],22:57,24:$Vt,26:55,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,59]},{15:[1,60]},{14:[1,61]},{15:[1,63],22:57,24:$Vt,26:62,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{14:[1,64]},{24:$Vl,33:65,35:$Vm,36:$Vn,37:$Vo,38:$Vp},o($Vk,[2,68]),{24:[1,66]},{24:[1,67]},o($Vk,[2,66],{21:[1,68],39:$Vu}),o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,60]),o($Vv,[2,61]),o($Vv,[2,62]),{14:[1,70]},{14:[1,71]},{14:[1,72]},{40:[1,73]},{24:[1,74]},{15:[1,75]},o($Vf,[2,95],{21:[1,76]}),{24:[1,77]},{15:[2,42],31:[1,78]},{22:80,43:79,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,81]},{15:[1,82],22:57,24:$Vt,26:83,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{15:[1,84]},{16:[1,85]},{15:[1,86],22:57,24:$Vt,26:87,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},o($Vk,[2,67],{21:[1,88],39:$Vu}),o($Vj,[2,71]),{40:[1,89]},o($Vk,[2,65]),{24:$Vl,33:90,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{35:[1,92],36:[1,93],37:[1,94],38:[1,95],88:91},{15:[1,96]},{15:[1,97]},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:98,46:$VA,47:$VB,48:$VC},{14:[1,106]},o($Vf,[2,94],{21:[1,107]}),o($Vf,[2,96]),{15:[2,40],31:[1,108]},{22:57,24:$Vt,26:109,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{18:[1,110]},{24:[1,111]},{8:114,9:115,12:$VD,17:112,19:113,20:$VE,22:119,24:$VF,28:12,32:$VG,34:$VH,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,122]},{15:[1,123]},{16:[1,124]},{9:127,10:128,19:126,22:131,24:$VI,27:125,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,146]},{15:[1,147]},o($Vk,[2,64]),{24:[1,151],83:[1,148],86:[1,149],91:150,93:[1,152],94:[1,153],95:[1,154],96:[1,155]},o($Vv,[2,63]),{15:[1,156]},{15:[2,155]},{15:[2,156]},{15:[2,157]},{15:[2,158]},{21:[1,157]},{21:[1,158]},o($V9,[2,75],{21:[1,159]}),o($VO,[2,79],{31:[1,160]}),o($VO,[2,80],{31:[1,161]}),o($VO,[2,81],{31:[1,162]}),o($VO,[2,82],{31:[1,163]}),o($VO,[2,83],{31:[1,164]}),o($VO,[2,84],{31:[1,165]}),o($VO,[2,85],{31:[1,166]}),{15:[1,168],24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:167,46:$VA,47:$VB,48:$VC},o($Vf,[2,93]),{22:57,24:$Vt,26:169,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{15:[2,43]},{21:[1,170]},{18:[2,77],31:[1,171]},{18:[1,172]},{8:114,9:115,12:$VD,17:173,19:113,20:$VE,22:119,24:$VF,28:12,32:$VG,34:$VH,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{8:114,9:115,12:$VD,17:174,19:113,20:$VE,22:119,24:$VF,28:12,32:$VG,34:$VH,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{8:114,9:115,12:$VD,17:175,19:113,20:$VE,22:119,24:$VF,28:12,32:$VG,34:$VH,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{21:[1,176]},{14:[1,177]},{14:[1,178]},{23:$Vc,24:$Vd,41:29},{23:$Va,24:$Vb},{14:$Vg,40:$Vh},{9:182,10:183,19:180,20:$VP,22:131,24:$VI,25:179,29:184,30:185,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,186]},{9:127,10:128,19:126,22:131,24:$VI,27:187,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{20:[1,188]},{9:127,10:128,19:126,20:[2,44],22:131,24:$VI,27:189,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{9:127,10:128,19:126,20:[2,45],22:131,24:$VI,27:190,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{9:127,10:128,19:126,20:[2,46],22:131,24:$VI,27:191,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{9:127,10:128,19:126,20:[2,47],22:131,24:$VI,27:192,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{9:127,10:128,19:126,20:[2,48],22:131,24:$VI,27:193,29:129,30:130,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{24:$Vd,41:29,83:$Ve},{40:$Vh,45:[1,194]},o($VQ,[2,97]),o($VQ,[2,98]),o($VQ,[2,124]),o($VQ,[2,125]),o($VQ,[2,126]),o($VQ,[2,99]),o($VQ,[2,100]),o($VQ,[2,101]),{14:[1,195]},{14:[1,196]},{14:[1,197],24:[1,198]},{16:[1,199]},{14:[1,200]},{9:182,10:183,19:180,20:$VP,22:131,24:$VI,25:201,29:184,30:185,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{16:[1,202]},{35:$VR,36:$VS,37:$VT,38:$VU,85:203},{24:[1,208]},o($Vk,[2,146]),{86:[1,209]},{86:[1,210]},{86:[1,211]},{86:[1,212]},{86:[1,213]},{21:[1,214]},o($Vk,[2,144]),o($Vk,[2,145]),o($V9,[2,76]),{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:215,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:216,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:217,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:218,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:219,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:220,46:$VA,47:$VB,48:$VC},{24:$Vw,35:$Vx,36:$Vy,37:$Vz,44:221,46:$VA,47:$VB,48:$VC},{15:[1,222]},o($V9,[2,74]),{15:[2,41]},o($V9,[2,72]),{22:80,43:223,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},o($V9,[2,10]),{18:[2,11]},{18:[2,12]},{18:[2,13]},{18:[2,14]},{24:$Vl,33:224,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vl,33:225,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{9:229,10:230,18:[1,226],19:227,20:$VV,22:131,24:$VI,29:231,30:232,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},o($VQ,[2,22]),{24:[1,233]},o($VQ,[2,27]),o($VQ,[2,28]),o($VQ,[2,29]),o($VQ,[2,30]),{9:182,10:183,19:180,20:$VP,22:131,24:$VI,25:234,29:184,30:185,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{20:[1,235]},{21:[1,236]},{20:[2,49]},{20:[2,50]},{20:[2,51]},{20:[2,52]},{20:[2,53]},{87:$Vq,89:$Vr,90:$Vs},{24:[1,237]},{24:$VW,55:238},{9:241,22:242,24:[1,243],72:240,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{73:[1,244]},{19:246,32:$VG,34:$VH,56:245},{24:$VW,55:247},{9:229,10:230,18:[1,248],19:227,20:$VV,22:131,24:$VI,29:231,30:232,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{9:182,10:183,19:180,20:$VP,22:131,24:$VI,25:249,29:184,30:185,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{84:[1,250]},{31:[1,251],84:[2,147]},{31:[1,252],84:[2,148]},{31:[1,253],84:[2,149]},{31:[1,254],84:[2,150]},{21:[1,255]},o($Vk,$VX,{92:256,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),{14:[1,265]},{14:[1,266]},{14:[1,267]},{14:[1,268]},o($Vk,[2,143]),o($VO,[2,86]),o($VO,[2,87]),o($VO,[2,88]),o($VO,[2,89]),o($VO,[2,90]),o($VO,[2,91]),o($VO,[2,92]),{21:[1,269]},{18:[2,78]},{15:[1,270],39:$Vu},{15:[1,271],39:$Vu},o($Vf,[2,17]),o($VQ,[2,31]),{24:[1,272]},o($VQ,[2,36]),o($VQ,[2,37]),o($VQ,[2,38]),o($VQ,[2,39]),{14:[1,273]},{9:229,10:230,18:[1,274],19:227,20:$VV,22:131,24:$VI,29:231,30:232,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{21:[1,275]},{18:[1,276]},{15:[1,277]},{15:[1,278]},{58:[1,279]},{15:[1,280]},{24:[1,282],74:281},{24:$Vd,41:29},{40:$Vh},{24:[1,284],35:[1,283]},{18:[1,285]},o([18,20,24,32,34,54,57,59,64,69,70,71,102,103,104,105,106,107],[2,114]),{15:[1,286]},o($Vf,[2,15]),{9:229,10:230,18:[1,287],19:227,20:$VV,22:131,24:$VI,29:231,30:232,32:$VG,34:$VH,49:133,50:134,51:138,52:139,53:140,54:$VJ,59:$VK,66:135,67:136,68:137,69:$VL,70:$VM,71:$VN,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{21:[1,288]},{35:$VR,36:$VS,37:$VT,38:$VU,85:289},{35:$VR,36:$VS,37:$VT,38:$VU,85:290},{35:$VR,36:$VS,37:$VT,38:$VU,85:291},{35:$VR,36:$VS,37:$VT,38:$VU,85:292},o($Vk,[2,142]),o($Vk,[2,159]),o($Vk,[2,164]),o($Vk,[2,165]),o($Vk,$VX,{92:293,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),o($Vk,$VX,{92:294,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),o($Vk,$VX,{92:295,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),o($Vk,$VX,{92:296,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),o($Vk,$VX,{92:297,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),o($Vk,$VX,{92:298,36:$VY,37:$VZ,39:$V_,97:$V$,98:$V01,99:$V11,100:$V21,101:$V31}),{24:[1,299]},{24:[1,300]},{24:[1,301]},{24:[1,302]},o($V9,[2,73]),o($V41,[2,55],{21:[1,303]}),o($V41,[2,57],{21:[1,304]}),{14:[1,305]},{15:[1,307],22:57,24:$Vt,26:306,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},o($Vf,[2,18]),{18:[1,308]},o($Vf,[2,20]),{16:[1,309]},{16:[1,310]},{24:[1,311]},{16:[1,312]},{21:[1,313]},{58:[1,319],76:[1,314],77:[1,315],78:[1,316],79:[1,317],80:[1,318]},{16:[1,320]},{16:[1,321]},{69:[1,322]},{16:[1,323],19:246,32:$VG,34:$VH,56:324},o($Vf,[2,16]),o($Vk,[2,141]),{84:[2,151]},{84:[2,152]},{84:[2,153]},{84:[2,154]},o($Vk,[2,166]),o($Vk,[2,167]),o($Vk,[2,168]),o($Vk,[2,169]),o($Vk,[2,170]),o($Vk,[2,171]),{15:[1,325]},{15:[1,326]},{15:[1,327]},{15:[1,328]},o($V41,[2,54]),o($V41,[2,56]),{15:[1,330],22:57,24:$Vt,26:329,102:$V3,103:$V4,104:$V5,105:$V6,106:$V7,107:$V8},{15:[1,331]},o($VQ,[2,25],{21:[1,332]}),o($Vf,[2,19]),{60:333,61:334,62:[1,335],65:$V51},{19:246,32:$VG,34:$VH,56:337},{15:[2,113]},{19:246,32:$VG,34:$VH,56:338},{24:[1,340],75:339},{24:[1,341]},{24:[1,342]},{24:[1,343]},{24:[1,344]},{24:[1,345]},{24:[1,346]},{19:246,32:$VG,34:$VH,56:347},{19:246,32:$VG,34:$VH,56:348},{14:[1,349]},{18:[1,351],19:246,32:$VG,34:$VH,56:350},o($VQ,[2,104],{57:[1,352]}),{21:[1,353]},{21:[1,354]},{21:[1,355]},{21:[1,356]},{15:[1,357]},o($VQ,[2,34],{21:[1,358]}),o($VQ,[2,24],{21:[1,359]}),o($VQ,[2,26]),{18:[1,361],61:360,62:[1,362],65:$V51},{18:[1,363]},{24:[1,364]},{63:[1,365]},{18:[1,366]},{18:[1,367]},{15:[2,132]},{81:[1,368],82:[1,369]},{21:[2,133]},{21:[2,134]},{21:[2,135]},{21:[2,136]},{21:[2,137]},{21:[2,138]},{18:[1,370]},{18:[1,371]},{24:$VW,55:372},{18:[1,373]},o($VQ,[2,103],{57:[1,374]}),{19:246,32:$VG,34:$VH,49:376,51:138,52:139,53:140,54:$VJ,56:375},o($Vk,[2,160]),o($Vk,[2,161]),o($Vk,[2,162]),o($Vk,[2,163]),o($VQ,[2,33],{21:[1,377]}),o($VQ,[2,35]),o($VQ,[2,23]),{18:[1,378]},o($VQ,[2,116]),{24:[1,379]},o($VQ,[2,117]),{63:[1,380]},{18:[2,123],19:246,32:$VG,34:$VH,56:381},o($VQ,[2,127]),o($VQ,[2,129]),{15:[2,139]},{15:[2,140]},o($VQ,[2,130]),o($VQ,[2,131]),{15:[1,382]},o($VQ,[2,102],{57:[1,383]}),{16:[1,384],49:385,51:138,52:139,53:140,54:$VJ},o($VQ,[2,109]),o($VQ,[2,112]),o($VQ,[2,32]),o($VQ,[2,115]),{63:[1,386]},{19:246,32:$VG,34:$VH,56:387,64:[1,388]},{18:[2,122]},{21:[1,389]},{16:[1,390],49:391,51:138,52:139,53:140,54:$VJ},{18:[1,393],19:246,32:$VG,34:$VH,56:392},o($VQ,[2,111]),{19:246,32:$VG,34:$VH,56:394,64:[1,395]},{64:[1,396]},{21:[1,397]},o($VQ,[2,128]),{18:[1,399],19:246,32:$VG,34:$VH,56:398},o($VQ,[2,110]),{18:[1,400]},o($VQ,[2,108]),{64:[1,401]},{21:[1,402]},{21:[1,403]},o($V61,[2,121]),{18:[1,404]},o($VQ,[2,107]),o($VQ,[2,106]),{21:[1,405]},o($V61,[2,119]),o($V61,[2,120]),o($VQ,[2,105]),o($V61,[2,118])],
defaultActions: {21:[2,1],23:[2,2],92:[2,155],93:[2,156],94:[2,157],95:[2,158],109:[2,43],169:[2,41],173:[2,11],174:[2,12],175:[2,13],176:[2,14],189:[2,49],190:[2,50],191:[2,51],192:[2,52],193:[2,53],223:[2,78],289:[2,151],290:[2,152],291:[2,153],292:[2,154],311:[2,113],339:[2,132],341:[2,133],342:[2,134],343:[2,135],344:[2,136],345:[2,137],346:[2,138],368:[2,139],369:[2,140],381:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentarios de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 104
break;
case 4:return 103
break;
case 5:return 107
break;
case 6:return 105
break;
case 7:return 106
break;
case 8:return 102
break;
case 9:return 46
break;
case 10:return 54
break;
case 11:return 57
break;
case 12:return 59
break;
case 13:return 62
break;
case 14:return 64
break;
case 15:return 65
break;
case 16:return 69
break;
case 17:return 71
break;
case 18:return 70
break;
case 19:return 'TK_CONTINUE'
break;
case 20:return 20
break;
case 21:return 12
break;
case 22:return 13
break;
case 23:return 81
break;
case 24:return 82
break;
case 25:return 73
break;
case 26:return 'TK_POW'
break;
case 27:return 'TK_SQRT'
break;
case 28:return 93
break;
case 29:return 94
break;
case 30:return 95
break;
case 31:return 96
break;
case 32:return 47
break;
case 33:return 48
break;
case 34:return 'OR'
break;
case 35:return 'AND'
break;
case 36:return 78
break;
case 37:return 58
break;
case 38:return 'NOT'
break;
case 39:return 40
break;
case 40:return 79
break;
case 41:return 80
break;
case 42:return 76
break;
case 43:return 77
break;
case 44:return 'CONCATENADOCADENA'
break;
case 45:return "OPERACIONESALIMPRIMIR"
break;
case 46:return "OP_VECOTRES"
break;
case 47:return 31
break;
case 48:return 21
break;
case 49:return 45
break;
case 50:return 63
break;
case 51:return 98
break;
case 52:return 99
break;
case 53:return 97
break;
case 54:return 39
break;
case 55:return 100
break;
case 56:return 101
break;
case 57:return 'OP_TERNARIO'
break;
case 58:return 14
break;
case 59:return 15
break;
case 60:return 16
break;
case 61:return 18
break;
case 62:return 83
break;
case 63:return 84
break;
case 64:return 'TK_CARACTEROFPOSITION'
break;
case 65:return 'TK_SUBSTRING'
break;
case 66:return 'TK_TOLOWER'
break;
case 67:return 'TK_TOUPPER'
break;
case 68:return 90
break;
case 69:return 32
break;
case 70:return 34
break;
case 71:return 'TK_PARSE'
break;
case 72:return 'TK_TOINT'
break;
case 73:return 'TK_TODOUBLE'
break;
case 74:return 'TK_STRINGPARSE'
break;
case 75:return 'TK_TYPEOF'
break;
case 76:return 42
break;
case 77:return 'TK_BEGIN'
break;
case 78:return 'TK_END'
break;
case 79:return 87
break;
case 80:return 89
break;
case 81:return 23
break;
case 82:return 24
break;
case 83:return 38
break;
case 84:return 37
break;
case 85:return 36
break;
case 86: cadena = ''; this.begin("string"); 
break;
case 87: cadena += yy_.yytext; 
break;
case 88: cadena += "\""; 
break;
case 89: cadena += "\n"; 
break;
case 90: cadena += " ";  
break;
case 91: cadena += "\t"; 
break;
case 92: cadena += "\\"; 
break;
case 93: cadena += "\'"; 
break;
case 94: cadena += "\r"; 
break;
case 95: yy_.yytext = cadena; this.popState(); return 35; 
break;
case 96:return 5
break;
case 97: errores.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:double\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:String\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&)/,/^(?:\$)/,/^(?:#)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:length\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:\\r)/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[87,88,89,90,91,92,93,94,95],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}