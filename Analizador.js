/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[5,10,12,24,42,81,82,83,84,85,86],$Vb=[1,25],$Vc=[1,26],$Vd=[1,28],$Ve=[5,10,12,20,24,32,34,42,81,82,83,84,85,86],$Vf=[1,33],$Vg=[1,30],$Vh=[23,24],$Vi=[5,10,12,18,20,21,24,31,32,34,42,54,59,69,70,71,81,82,83,84,85,86],$Vj=[5,10,12,18,20,24,32,34,42,54,59,69,70,71,81,82,83,84,85,86],$Vk=[1,44],$Vl=[1,43],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,53],$Vq=[1,63],$Vr=[5,10,12,15,18,20,21,24,32,34,39,42,54,59,69,70,71,81,82,83,84,85,86],$Vs=[1,83],$Vt=[1,89],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,102],$VA=[1,99],$VB=[1,103],$VC=[1,100],$VD=[1,101],$VE=[1,113],$VF=[1,126],$VG=[1,122],$VH=[1,123],$VI=[1,125],$VJ=[1,124],$VK=[5,10,12,15,21,24,42,81,82,83,84,85,86],$VL=[1,151],$VM=[18,20,24,32,34,54,59,69,70,71,81,82,83,84,85,86],$VN=[1,182],$VO=[1,192],$VP=[12,18,20,24,32,34,54,57,59,64,69,70,71,81,82,83,84,85,86],$VQ=[1,244],$VR=[18,62,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"instrucciones":6,"Mainbody":7,"FuncionesMetodos":8,"Dec_Var":9,"Dec_Vec":10,"Dec_Structs":11,"TK_VOID":12,"TK_MAIN":13,"PARENTESIS_ABRE":14,"PARENTESIS_CIERRA":15,"LlaveAbre":16,"cuerpomain":17,"LlaveCierra":18,"imprimir":19,"TK_RETURN":20,"TK_PYC":21,"tipos":22,"TK_FUNCTION":23,"IDENTIFICADOR":24,"cuerpoFunction":25,"listaparametros":26,"cuerpoMetodo":27,"LlamadaMF":28,"SentenciasControl":29,"SentenciasCiclicas":30,"TK_COMA":31,"TK_PRINT":32,"impresion":33,"TK_PRINTLN":34,"CADENA":35,"ENTERO":36,"DECI":37,"CARACTER":38,"OP_SUMA":39,"IGUAL":40,"cadvar":41,"TK_STRUCT":42,"listatributos":43,"params":44,"TK_PUNTO":45,"NULL":46,"TRUE":47,"FALSE":48,"ControlIF":49,"ControlSwitch":50,"if":51,"ifelse":52,"elseif":53,"TK_IF":54,"condiciones":55,"instIf":56,"TK_ELSE":57,"IGUALIGUAL":58,"TK_SWITCH":59,"Caselist":60,"listDefault":61,"TK_CASE":62,"TK_DOSPUNTS":63,"TK_BREAK":64,"TK_DEFAULT":65,"Cwhile":66,"Cfor":67,"Cdowhile":68,"TK_WHILE":69,"TK_DO":70,"TK_FOR":71,"condicionesFor":72,"condicionFor":73,"actualizacion":74,"MAYOR":75,"MENOR":76,"DIFERENTEA":77,"MENORIGUAL":78,"MAYORIGUAL":79,"INCREMENTO":80,"STRING":81,"INT":82,"DOUBLE":83,"CHAR":84,"FLOAT":85,"BOOLEAN":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"Dec_Vec",12:"TK_VOID",13:"TK_MAIN",14:"PARENTESIS_ABRE",15:"PARENTESIS_CIERRA",16:"LlaveAbre",18:"LlaveCierra",20:"TK_RETURN",21:"TK_PYC",23:"TK_FUNCTION",24:"IDENTIFICADOR",31:"TK_COMA",32:"TK_PRINT",34:"TK_PRINTLN",35:"CADENA",36:"ENTERO",37:"DECI",38:"CARACTER",39:"OP_SUMA",40:"IGUAL",42:"TK_STRUCT",45:"TK_PUNTO",46:"NULL",47:"TRUE",48:"FALSE",54:"TK_IF",57:"TK_ELSE",58:"IGUALIGUAL",59:"TK_SWITCH",62:"TK_CASE",63:"TK_DOSPUNTS",64:"TK_BREAK",65:"TK_DEFAULT",69:"TK_WHILE",70:"TK_DO",71:"TK_FOR",75:"MAYOR",76:"MENOR",77:"DIFERENTEA",78:"MENORIGUAL",79:"MAYORIGUAL",80:"INCREMENTO",81:"STRING",82:"INT",83:"DOUBLE",84:"CHAR",85:"FLOAT",86:"BOOLEAN"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[17,2],[17,2],[17,2],[17,2],[8,8],[8,9],[8,8],[8,9],[8,10],[8,9],[8,1],[25,1],[25,6],[25,5],[25,4],[25,5],[25,1],[25,1],[25,1],[25,2],[25,7],[25,6],[25,5],[25,6],[25,2],[25,2],[25,2],[26,2],[26,4],[26,1],[26,3],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[19,5],[19,4],[19,5],[19,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[9,5],[9,4],[9,3],[9,4],[9,3],[9,2],[41,1],[41,3],[11,6],[11,8],[11,6],[11,5],[11,6],[43,2],[43,4],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[28,5],[28,4],[28,3],[28,4],[29,1],[29,1],[49,1],[49,1],[49,1],[51,7],[51,6],[51,5],[52,11],[52,10],[52,10],[52,9],[52,7],[53,9],[53,8],[53,7],[55,3],[56,1],[50,8],[50,7],[50,7],[60,7],[60,6],[60,6],[60,5],[61,3],[61,2],[30,1],[30,1],[30,1],[66,7],[68,9],[67,7],[72,4],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[74,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]); return $$[$0-1]; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:$V0,11:9,12:$V1,22:11,24:$V2,28:12,42:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{1:[3]},{5:[1,21],6:22,7:5,8:6,9:7,10:$V0,11:9,12:$V1,22:11,24:$V2,28:12,42:$V3,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{5:[1,23]},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{13:[1,24],23:$Vb,24:$Vc},{23:[1,27],24:$Vd,41:29},o($Ve,[2,21]),{14:$Vf,24:[1,31],40:$Vg,45:[1,32]},{24:[1,34]},o($Vh,[2,134]),o($Vh,[2,135]),o($Vh,[2,136]),o($Vh,[2,137]),o($Vh,[2,138]),o($Vh,[2,139]),{1:[2,1]},o($Va,[2,3]),{1:[2,2]},{14:[1,35]},{24:[1,36]},{14:[1,37]},{24:[1,38]},o($Vi,[2,66],{40:[1,39]}),o($Vj,[2,65],{21:[1,40],31:[1,41]}),{24:$Vk,33:42,35:$Vl,36:$Vm,37:$Vn,38:$Vo},{40:[1,48]},{24:[1,49]},{15:[1,51],22:52,24:$Vp,26:50,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,54]},{15:[1,55]},{14:[1,56]},{15:[1,58],22:52,24:$Vp,26:57,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{14:[1,59]},{24:$Vk,33:60,35:$Vl,36:$Vm,37:$Vn,38:$Vo},o($Vj,[2,64]),{24:[1,61]},o($Vj,[2,62],{21:[1,62],39:$Vq}),o($Vr,[2,54]),o($Vr,[2,55]),o($Vr,[2,56]),o($Vr,[2,57]),o($Vr,[2,58]),{24:[1,64]},{40:[1,65]},{15:[1,66]},o($Ve,[2,91],{21:[1,67]}),{24:[1,68]},{15:[2,40],31:[1,69]},{22:71,43:70,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,72]},{15:[1,73],22:52,24:$Vp,26:74,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{15:[1,75]},{16:[1,76]},{15:[1,77],22:52,24:$Vp,26:78,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Vj,[2,63],{21:[1,79],39:$Vq}),o($Vi,[2,67]),o($Vj,[2,61]),{24:$Vk,33:80,35:$Vl,36:$Vm,37:$Vn,38:$Vo},{14:[1,81]},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:82,46:$Vw,47:$Vx,48:$Vy},o($Ve,[2,90],{21:[1,90]}),o($Ve,[2,92]),{15:[2,38],31:[1,91]},{22:52,24:$Vp,26:92,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{18:[1,93]},{24:[1,94]},{8:97,9:98,12:$Vz,17:95,19:96,20:$VA,22:11,24:$VB,28:12,32:$VC,34:$VD,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,104]},{15:[1,105]},{16:[1,106]},{9:109,19:108,22:112,24:$VE,27:107,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,127]},{15:[1,128]},o($Vj,[2,60]),o($Vr,[2,59]),{15:[1,130],24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:129,46:$Vw,47:$Vx,48:$Vy},o($Va,[2,71],{21:[1,131]}),o($VK,[2,75],{31:[1,132]}),o($VK,[2,76],{31:[1,133]}),o($VK,[2,77],{31:[1,134]}),o($VK,[2,78],{31:[1,135]}),o($VK,[2,79],{31:[1,136]}),o($VK,[2,80],{31:[1,137]}),o($VK,[2,81],{31:[1,138]}),o($Ve,[2,89]),{22:52,24:$Vp,26:139,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{15:[2,41]},{21:[1,140]},{18:[2,73],31:[1,141]},{18:[1,142]},{8:97,9:98,12:$Vz,17:143,19:96,20:$VA,22:11,24:$VB,28:12,32:$VC,34:$VD,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{8:97,9:98,12:$Vz,17:144,19:96,20:$VA,22:11,24:$VB,28:12,32:$VC,34:$VD,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{8:97,9:98,12:$Vz,17:145,19:96,20:$VA,22:11,24:$VB,28:12,32:$VC,34:$VD,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{21:[1,146]},{14:[1,147]},{14:[1,148]},{23:$Vb,24:$Vc},{14:$Vf,40:$Vg},{9:152,19:150,20:$VL,22:112,24:$VE,25:149,29:153,30:154,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,155]},{9:109,19:108,22:112,24:$VE,27:156,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{20:[1,157]},{9:109,19:108,20:[2,42],22:112,24:$VE,27:158,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{9:109,19:108,20:[2,43],22:112,24:$VE,27:159,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{9:109,19:108,20:[2,44],22:112,24:$VE,27:160,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{9:109,19:108,20:[2,45],22:112,24:$VE,27:161,29:110,30:111,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{24:$Vd,41:29},{40:$Vg},o($VM,[2,93]),o($VM,[2,94]),o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,122]),o($VM,[2,95]),o($VM,[2,96]),o($VM,[2,97]),{14:[1,162]},{14:[1,163]},{14:[1,164]},{16:[1,165]},{14:[1,166]},{9:152,19:150,20:$VL,22:112,24:$VE,25:167,29:153,30:154,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{16:[1,168]},{15:[1,169]},o($Va,[2,70]),o($Va,[2,72]),{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:170,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:171,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:172,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:173,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:174,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:175,46:$Vw,47:$Vx,48:$Vy},{24:$Vs,35:$Vt,36:$Vu,37:$Vv,44:176,46:$Vw,47:$Vx,48:$Vy},{15:[2,39]},o($Va,[2,68]),{22:71,43:177,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Va,[2,10]),{18:[2,11]},{18:[2,12]},{18:[2,13]},{18:[2,14]},{24:$Vk,33:178,35:$Vl,36:$Vm,37:$Vn,38:$Vo},{24:$Vk,33:179,35:$Vl,36:$Vm,37:$Vn,38:$Vo},{9:183,18:[1,180],19:181,20:$VN,22:112,24:$VE,29:184,30:185,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($VM,[2,22]),{24:[1,186]},o($VM,[2,27]),o($VM,[2,28]),o($VM,[2,29]),{9:152,19:150,20:$VL,22:112,24:$VE,25:187,29:153,30:154,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{20:[1,188]},{21:[1,189]},{20:[2,46]},{20:[2,47]},{20:[2,48]},{20:[2,49]},{24:[1,190]},{24:$VO,55:191},{9:194,22:112,24:$VE,72:193,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{19:196,32:$VC,34:$VD,56:195},{24:$VO,55:197},{9:183,18:[1,198],19:181,20:$VN,22:112,24:$VE,29:184,30:185,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{9:152,19:150,20:$VL,22:112,24:$VE,25:199,29:153,30:154,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{21:[1,200]},o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),{18:[2,74]},{15:[1,201],39:$Vq},{15:[1,202],39:$Vq},o($Ve,[2,17]),o($VM,[2,30]),{24:[1,203]},o($VM,[2,35]),o($VM,[2,36]),o($VM,[2,37]),{14:[1,204]},{9:183,18:[1,205],19:181,20:$VN,22:112,24:$VE,29:184,30:185,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{21:[1,206]},{18:[1,207]},{15:[1,208]},{15:[1,209]},{58:[1,210]},{15:[1,211]},{24:[1,213],73:212},{18:[1,214]},o([18,20,24,32,34,54,57,59,64,69,70,71,81,82,83,84,85,86],[2,110]),{15:[1,215]},o($Ve,[2,15]),{9:183,18:[1,216],19:181,20:$VN,22:112,24:$VE,29:184,30:185,32:$VC,34:$VD,49:114,50:115,51:119,52:120,53:121,54:$VF,59:$VG,66:116,67:117,68:118,69:$VH,70:$VI,71:$VJ,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Va,[2,69]),o($VP,[2,51],{21:[1,217]}),o($VP,[2,53],{21:[1,218]}),{14:[1,219]},{15:[1,221],22:52,24:$Vp,26:220,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},o($Ve,[2,18]),{18:[1,222]},o($Ve,[2,20]),{16:[1,223]},{16:[1,224]},{24:[1,225]},{16:[1,226]},{21:[1,227]},{58:[1,233],75:[1,228],76:[1,229],77:[1,230],78:[1,231],79:[1,232]},{69:[1,234]},{16:[1,235],19:196,32:$VC,34:$VD,56:236},o($Ve,[2,16]),o($VP,[2,50]),o($VP,[2,52]),{15:[1,238],22:52,24:$Vp,26:237,81:$V4,82:$V5,83:$V6,84:$V7,85:$V8,86:$V9},{15:[1,239]},o($VM,[2,25],{21:[1,240]}),o($Ve,[2,19]),{60:241,61:242,62:[1,243],65:$VQ},{19:196,32:$VC,34:$VD,56:245},{15:[2,109]},{19:196,32:$VC,34:$VD,56:246},{24:[1,248],74:247},{24:[1,249]},{24:[1,250]},{24:[1,251]},{24:[1,252]},{24:[1,253]},{24:[1,254]},{14:[1,255]},{18:[1,257],19:196,32:$VC,34:$VD,56:256},o($VM,[2,100],{57:[1,258]}),{15:[1,259]},o($VM,[2,33],{21:[1,260]}),o($VM,[2,24],{21:[1,261]}),o($VM,[2,26]),{18:[1,263],61:262,62:[1,264],65:$VQ},{18:[1,265]},{24:[1,266]},{63:[1,267]},{18:[1,268]},{18:[1,269]},{15:[2,126]},{80:[1,270]},{21:[2,127]},{21:[2,128]},{21:[2,129]},{21:[2,130]},{21:[2,131]},{21:[2,132]},{24:$VO,55:271},{18:[1,272]},o($VM,[2,99],{57:[1,273]}),{19:196,32:$VC,34:$VD,49:275,51:119,52:120,53:121,54:$VF,56:274},o($VM,[2,32],{21:[1,276]}),o($VM,[2,34]),o($VM,[2,23]),{18:[1,277]},o($VM,[2,112]),{24:[1,278]},o($VM,[2,113]),{63:[1,279]},{18:[2,119],19:196,32:$VC,34:$VD,56:280},o($VM,[2,123]),o($VM,[2,125]),{15:[2,133]},{15:[1,281]},o($VM,[2,98],{57:[1,282]}),{16:[1,283],49:284,51:119,52:120,53:121,54:$VF},o($VM,[2,105]),o($VM,[2,108]),o($VM,[2,31]),o($VM,[2,111]),{63:[1,285]},{19:196,32:$VC,34:$VD,56:286,64:[1,287]},{18:[2,118]},{21:[1,288]},{16:[1,289],49:290,51:119,52:120,53:121,54:$VF},{18:[1,292],19:196,32:$VC,34:$VD,56:291},o($VM,[2,107]),{19:196,32:$VC,34:$VD,56:293,64:[1,294]},{64:[1,295]},{21:[1,296]},o($VM,[2,124]),{18:[1,298],19:196,32:$VC,34:$VD,56:297},o($VM,[2,106]),{18:[1,299]},o($VM,[2,104]),{64:[1,300]},{21:[1,301]},{21:[1,302]},o($VR,[2,117]),{18:[1,303]},o($VM,[2,103]),o($VM,[2,102]),{21:[1,304]},o($VR,[2,115]),o($VR,[2,116]),o($VM,[2,101]),o($VR,[2,114])],
defaultActions: {21:[2,1],23:[2,2],92:[2,41],139:[2,39],143:[2,11],144:[2,12],145:[2,13],146:[2,14],158:[2,46],159:[2,47],160:[2,48],161:[2,49],177:[2,74],225:[2,109],247:[2,126],249:[2,127],250:[2,128],251:[2,129],252:[2,130],253:[2,131],254:[2,132],270:[2,133],280:[2,118]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentarios de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 83
break;
case 4:return 82
break;
case 5:return 86
break;
case 6:return 84
break;
case 7:return 85
break;
case 8:return 81
break;
case 9:return 46
break;
case 10:return 54
break;
case 11:return 57
break;
case 12:return 59
break;
case 13:return 62
break;
case 14:return 64
break;
case 15:return 65
break;
case 16:return 69
break;
case 17:return 71
break;
case 18:return 70
break;
case 19:return 'TK_CONTINUE'
break;
case 20:return 20
break;
case 21:return 12
break;
case 22:return 13
break;
case 23:return 80
break;
case 24:return 'DECREMENTO'
break;
case 25:return 'TK_POW'
break;
case 26:return 'TK_SQRT'
break;
case 27:return 'TK_SENO'
break;
case 28:return 'TK_COSENO'
break;
case 29:return 'TK_TANGENTE'
break;
case 30:return 'TK_LOGARITMOB10'
break;
case 31:return 47
break;
case 32:return 48
break;
case 33:return 'OR'
break;
case 34:return 'AND'
break;
case 35:return 77
break;
case 36:return 58
break;
case 37:return 'NOT'
break;
case 38:return 40
break;
case 39:return 78
break;
case 40:return 79
break;
case 41:return 75
break;
case 42:return 76
break;
case 43:return 'CONCATENADOCADENA'
break;
case 44:return "OPERACIONESALIMPRIMIR"
break;
case 45:return "OP_VECOTRES"
break;
case 46:return 31
break;
case 47:return 21
break;
case 48:return 45
break;
case 49:return 63
break;
case 50:return 'OP_MULTIPLICACION'
break;
case 51:return 'OP_DIVISION'
break;
case 52:return 'OP_MENOS'
break;
case 53:return 39
break;
case 54:return 'OP_EXPONENTE'
break;
case 55:return 'OP_MODULO'
break;
case 56:return 'OP_TERNARIO'
break;
case 57:return 14
break;
case 58:return 15
break;
case 59:return 16
break;
case 60:return 18
break;
case 61:return 'COR_ABRE'
break;
case 62:return 'COR_CIERRA'
break;
case 63:return 'TK_CARACTEROFPOSITION'
break;
case 64:return 'TK_SUBSTRING'
break;
case 65:return 'TK_TOLOWER'
break;
case 66:return 'TK_TOUPPER'
break;
case 67:return 'TK_LENGTH'
break;
case 68:return 32
break;
case 69:return 34
break;
case 70:return 'TK_PARSE'
break;
case 71:return 'TK_TOINT'
break;
case 72:return 'TK_TODOUBLE'
break;
case 73:return 'TK_STRINGPARSE'
break;
case 74:return 'TK_TYPEOF'
break;
case 75:return 42
break;
case 76:return 'TK_BEGIN'
break;
case 77:return 'TK_END'
break;
case 78:return 'TK_PUSH'
break;
case 79:return 'TK_POP'
break;
case 80:return 23
break;
case 81:return 24
break;
case 82:return 38
break;
case 83:return 37
break;
case 84:return 36
break;
case 85: cadena = ''; this.begin("string"); 
break;
case 86: cadena += yy_.yytext; 
break;
case 87: cadena += "\""; 
break;
case 88: cadena += "\n"; 
break;
case 89: cadena += " ";  
break;
case 90: cadena += "\t"; 
break;
case 91: cadena += "\\"; 
break;
case 92: cadena += "\'"; 
break;
case 93: cadena += "\r"; 
break;
case 94: yy_.yytext = cadena; this.popState(); return 35; 
break;
case 95:return 5
break;
case 96: errores.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:double\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:String\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&)/,/^(?:\$)/,/^(?:#)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:length\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:\\r)/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[86,87,88,89,90,91,92,93,94],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}