/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[5,14,22,26,127,128,129,130,131,132],$Va=[1,34],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[2,22,24,29],$Vm=[2,109],$Vn=[1,49],$Vo=[1,48],$Vp=[1,51],$Vq=[1,66],$Vr=[1,65],$Vs=[1,74],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,67],$Vy=[1,68],$Vz=[1,58],$VA=[1,62],$VB=[1,78],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[1,63],$VG=[1,64],$VH=[1,73],$VI=[1,88],$VJ=[1,87],$VK=[1,90],$VL=[1,91],$VM=[1,95],$VN=[1,96],$VO=[2,5,14,17,20,22,26,44,46,49,51,55,56,57,62,63,64,65,66,127,128,129,130,131,132],$VP=[1,104],$VQ=[1,107],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[1,124],$VW=[2,5,14,16,20,22,24,26,32,44,46,49,51,55,56,57,62,63,64,65,66,75,76,77,78,79,80,81,84,86,90,91,92,93,94,103,120,123,125,126,127,128,129,130,131,132],$VX=[1,127],$VY=[1,133],$VZ=[1,134],$V_=[1,135],$V$=[1,136],$V01=[1,137],$V11=[1,138],$V21=[1,139],$V31=[1,140],$V41=[1,141],$V51=[1,142],$V61=[1,143],$V71=[1,144],$V81=[1,145],$V91=[1,146],$Va1=[2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,85,86,87,88,89,95,96,97,98,99,100,101,102,109,127,128,129,130,131,132],$Vb1=[2,158],$Vc1=[2,162],$Vd1=[2,165],$Ve1=[1,147],$Vf1=[1,148],$Vg1=[1,161],$Vh1=[1,171],$Vi1=[17,25,32],$Vj1=[16,22,24,75,76,77,78,79,80,81,84,86,90,91,92,93,94,103,120,123,125,126,127,128,129,130,131,132],$Vk1=[1,185],$Vl1=[1,194],$Vm1=[1,192],$Vn1=[1,193],$Vo1=[1,197],$Vp1=[1,199],$Vq1=[1,221],$Vr1=[1,222],$Vs1=[1,224],$Vt1=[1,225],$Vu1=[2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,100,101,109,127,128,129,130,131,132],$Vv1=[2,5,13,14,17,20,22,26,44,46,49,51,55,56,57,62,63,64,65,66,127,128,129,130,131,132],$Vw1=[20,32],$Vx1=[1,262],$Vy1=[1,261],$Vz1=[1,274],$VA1=[1,289],$VB1=[1,290],$VC1=[1,291],$VD1=[1,293],$VE1=[1,292],$VF1=[1,283],$VG1=[1,284],$VH1=[1,285],$VI1=[1,276],$VJ1=[1,277],$VK1=[2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,85,86,95,96,97,98,99,100,101,102,109,127,128,129,130,131,132],$VL1=[2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,95,96,97,98,99,100,101,102,109,127,128,129,130,131,132],$VM1=[1,332],$VN1=[2,20,22,26,44,46,49,51,55,56,57,62,63,64,65,66,127,128,129,130,131,132],$VO1=[1,354],$VP1=[13,17,32,82,83],$VQ1=[2,5,14,20,22,26,44,46,49,51,55,56,57,62,63,64,65,66,127,128,129,130,131,132],$VR1=[1,414],$VS1=[2,205],$VT1=[17,85,86,87,88,89,95,96,97,98,99,100,101,102,109],$VU1=[1,491],$VV1=[20,49,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"instrucciones":6,"MFBody":7,"MainBody":8,"Dec_Var":9,"Dec_Vect":10,"Dec_Struct":11,"LLamada":12,"TK_PYC":13,"TK_VOID":14,"TK_MAIN":15,"PARENTESIS_ABRE":16,"PARENTESIS_CIERRA":17,"LlaveAbre":18,"Instructions":19,"LlaveCierra":20,"Tipos":21,"IDENTIFICADOR":22,"Params":23,"COR_ABRE":24,"COR_CIERRA":25,"TK_STRUCT":26,"BodyStruct":27,"IGUAL":28,"TK_PUNTO":29,"Expresiones":30,"s":31,"TK_COMA":32,"parametros":33,"cuerpo":34,"Imprimir":35,"SentenciasControl":36,"SentenciasCiclicas":37,"SentenciasTransferencias":38,"ControlIF":39,"CSwitch":40,"If":41,"IfElse":42,"ElseIf":43,"TK_IF":44,"TK_ELSE":45,"TK_SWITCH":46,"ListCase":47,"Default":48,"TK_CASE":49,"TK_DOSPUNTS":50,"TK_DEFAULT":51,"While":52,"For":53,"DoWhile":54,"TK_WHILE":55,"TK_DO":56,"TK_FOR":57,"Actualizacion":58,"IN":59,"INCREMENTO":60,"DECREMENTO":61,"TK_BREAK":62,"TK_RETURN":63,"TK_CONTINUE":64,"TK_PRINT":65,"TK_PRINTLN":66,"operString":67,"Llamada":68,"OP_VECOTRES":69,"TK_PUSH":70,"TK_POP":71,"TK_LENGTH":72,"opVector":73,"simbolos":74,"TK_SENO":75,"TK_COSENO":76,"TK_TANGENTE":77,"TK_LOGARITMOB10":78,"TK_POW":79,"TK_SQRT":80,"CADENA":81,"CONCATENADOCADENA":82,"OP_EXPONENTE":83,"ENTERO":84,"OP_SUMA":85,"OP_MENOS":86,"OP_DIVISION":87,"OP_MULTIPLICACION":88,"OP_MODULO":89,"CARACTER":90,"TRUE":91,"FALSE":92,"DECI":93,"NULL":94,"IGUALIGUAL":95,"MENOR":96,"MENORIGUAL":97,"MAYOR":98,"MAYORIGUAL":99,"OR":100,"AND":101,"DIFERENTEA":102,"NOT":103,"FuncioesReservadas":104,"Casteos":105,"Ternario":106,"TK_BEGIN":107,"TK_END":108,"OP_TERNARIO":109,"FCaracterOfPosition":110,"FSubString":111,"Flength":112,"FToLower":113,"FToUpper":114,"FTypeof":115,"TK_CARACTEROFPOSITION":116,"TK_SUBSTRING":117,"TK_TOLOWER":118,"TK_TOUPPER":119,"TK_TYPEOF":120,"parseo":121,"toTipo":122,"TK_STRINGPARSE":123,"TK_PARSE":124,"TK_TOINT":125,"TK_TODOUBLE":126,"STRING":127,"INT":128,"DOUBLE":129,"CHAR":130,"FLOAT":131,"BOOLEAN":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"TK_PYC",14:"TK_VOID",15:"TK_MAIN",16:"PARENTESIS_ABRE",17:"PARENTESIS_CIERRA",18:"LlaveAbre",20:"LlaveCierra",22:"IDENTIFICADOR",24:"COR_ABRE",25:"COR_CIERRA",26:"TK_STRUCT",28:"IGUAL",29:"TK_PUNTO",32:"TK_COMA",44:"TK_IF",45:"TK_ELSE",46:"TK_SWITCH",49:"TK_CASE",50:"TK_DOSPUNTS",51:"TK_DEFAULT",55:"TK_WHILE",56:"TK_DO",57:"TK_FOR",59:"IN",60:"INCREMENTO",61:"DECREMENTO",62:"TK_BREAK",63:"TK_RETURN",64:"TK_CONTINUE",65:"TK_PRINT",66:"TK_PRINTLN",68:"Llamada",69:"OP_VECOTRES",70:"TK_PUSH",71:"TK_POP",72:"TK_LENGTH",75:"TK_SENO",76:"TK_COSENO",77:"TK_TANGENTE",78:"TK_LOGARITMOB10",79:"TK_POW",80:"TK_SQRT",81:"CADENA",82:"CONCATENADOCADENA",83:"OP_EXPONENTE",84:"ENTERO",85:"OP_SUMA",86:"OP_MENOS",87:"OP_DIVISION",88:"OP_MULTIPLICACION",89:"OP_MODULO",90:"CARACTER",91:"TRUE",92:"FALSE",93:"DECI",94:"NULL",95:"IGUALIGUAL",96:"MENOR",97:"MENORIGUAL",98:"MAYOR",99:"MAYORIGUAL",100:"OR",101:"AND",102:"DIFERENTEA",103:"NOT",107:"TK_BEGIN",108:"TK_END",109:"OP_TERNARIO",116:"TK_CARACTEROFPOSITION",117:"TK_SUBSTRING",118:"TK_TOLOWER",119:"TK_TOUPPER",120:"TK_TYPEOF",123:"TK_STRINGPARSE",124:"TK_PARSE",125:"TK_TOINT",126:"TK_TODOUBLE",127:"STRING",128:"INT",129:"DOUBLE",130:"CHAR",131:"FLOAT",132:"BOOLEAN"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,7],[8,4],[7,7],[7,8],[7,7],[7,6],[7,3],[7,5],[7,7],[7,8],[7,7],[7,6],[7,3],[11,6],[11,8],[11,7],[11,6],[27,1],[27,3],[31,1],[31,2],[23,1],[23,3],[33,4],[33,2],[33,2],[33,1],[19,2],[19,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,2],[34,2],[36,1],[36,1],[39,1],[39,1],[39,1],[39,3],[41,7],[41,6],[42,11],[42,10],[42,10],[42,9],[43,9],[43,8],[40,8],[40,7],[40,7],[40,3],[47,5],[47,4],[47,4],[47,3],[47,3],[48,3],[48,2],[37,1],[37,1],[37,1],[52,7],[52,6],[52,3],[54,9],[54,8],[54,3],[53,10],[53,9],[53,7],[53,3],[58,3],[58,2],[58,2],[38,2],[38,2],[38,2],[38,3],[35,5],[35,5],[35,5],[35,5],[35,5],[35,5],[35,3],[35,3],[9,5],[9,5],[9,3],[9,4],[9,3],[9,3],[9,2],[9,7],[9,5],[9,3],[10,9],[10,8],[10,8],[10,7],[10,6],[10,6],[10,8],[10,7],[10,2],[10,5],[73,3],[73,4],[73,5],[73,6],[73,6],[73,5],[73,5],[73,6],[73,6],[73,5],[73,5],[73,6],[73,6],[73,5],[73,5],[73,6],[73,6],[73,5],[73,8],[73,7],[73,7],[73,5],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[12,4],[12,3],[74,1],[74,1],[74,1],[74,1],[74,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,6],[30,4],[30,4],[30,4],[30,4],[30,4],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,4],[30,3],[30,1],[30,1],[30,1],[30,6],[30,6],[30,6],[30,2],[106,5],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[110,6],[111,8],[112,5],[113,5],[114,5],[115,4],[105,1],[105,1],[105,4],[121,6],[122,4],[122,4],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 retorno = { parse: $$[$0-1], errores: errores }; errores = []; return $$[$0-1]; 
break;
case 2:
 retorno = { parse: null, errores: errores }; errores = []; return retorno; 
break;
case 3:
 if($$[$0] !=="") $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4: case 39:
 if($$[$0] !== "") this.$ = [$$[$0]]; else this.$ = []; 
break;
case 5: case 28: case 50: case 51: case 53: case 54: case 209: case 210:
 this.$ = $$[$0] 
break;
case 6: case 7: case 8: case 9:
 this.$= $$[$0] 
break;
case 10:
 this.$= $$[$0-1] 
break;
case 11:
 this.$ = Instruccion.nuevoStart("main", [], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 12:
 this.$= ""; errores.push({ tipo: "Sintactico", error: "Declaracion de main invalido", linea: this.$.first_line, columna: this.$.first_column+1 }); console.log(errores) 
break;
case 13:
 this.$ = Instruccion.nuevaFuncion($$[$0-5], null, $$[$0-1], $$[$0-6], this.$.first_line, this.$.first_column+1) 
break;
case 14:
 this.$= Instruccion.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1], $$[$0-7], this.$.first_line, this.$.first_column+1) 
break;
case 15:
 this.$= Instruccion.nuevaFuncion($$[$0-5], $$[$0-3], [], $$[$0-6], this.$.first_line, this.$.first_column+1) 
break;
case 16:
 this.$= Instruccion.nuevaFuncion($$[$0-4], null, [], $$[$0-5], this.$.first_line, this.$.first_column+1) 
break;
case 17: case 18:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de función no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 19:
 this.$ = Instruccion.nuevoMetodo($$[$0-5], null, $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 20:
 this.$ = Instruccion.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 21:
 this.$ = Instruccion.nuevoMetodo($$[$0-5], $$[$0-3], [], this.$.first_line, this.$.first_column+1) 
break;
case 22:
 this.$ = Instruccion.nuevoMetodo($$[$0-4], [], [], this.$.first_line, this.$.first_column+1) 
break;
case 23:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de método no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 24:
 alert("Struct: "+$$[$0-5]+", Nombre: "+$$[$0-4]); return $$[$0-2]; 
break;
case 25:
 alert("Nombre Struct: "+$$[$0-7]+", Identificador1: "+$$[$0-6]+", Identificador2: "+$$[$0-4]); return $$[$0-3]; 
break;
case 26:
 alert("Nombre Struct: "+$$[$0-6]+", Identificador1: "+$$[$0-5]+", Identificador2: "+$$[$0-3]); return $$[$0-6]; 
break;
case 27:
 alert("Nombre Struct: "+$$[$0-5]+" Identificador: "+$$[$0-3]); return $$[$0-1]; 
break;
case 29:
 $$[$0-2].push($$[$0]); this.$=1; return $$[$0-2]; 
break;
case 30: case 41: case 42: case 43: case 44: case 45: case 46: case 199:
this.$=$$[$0]
break;
case 31:
 alert("Nombre: "+$$[$0-1]+", identificador: "+$$[$0]); return $$[$0]; 
break;
case 32:
 this.$ = [$$[$0]];  
break;
case 33:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 34:
 this.$ = Instruccion.nuevoParametro($$[$0], {vector: $$[$0-3]}, this.$.first_line, this.$.first_column+1) 
break;
case 35:
 this.$=Instruccion.nuevoParametro($$[$0], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 36:
 this.$=Instruccion.nuevoParametro($$[$0], {struct: $$[$0-1]}, this.$.first_line, this.$.first_column+1) 
break;
case 37:
 this.$ = $$[$0]
break;
case 38:
 if($$[$0] !== "") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 40: case 52: case 75: case 76: case 77: case 153: case 154: case 155: case 156: case 157: case 197: case 198: case 200: case 201: case 202:
 this.$=$$[$0] 
break;
case 47:
this.$=$$[$0-1]
break;
case 48: case 49:
 this.$=""; errores.push({ tipo: "Sintactico", error: "Declaracion de instruccion no valida", linea: this.$.first_line, columna: this.$.first_column+1}); 
break;
case 55:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de sentencia If no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 56:
 this.$ = new Instruccion.nuevoIf($$[$0-4], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 57:
 this.$ = new Instruccion.nuevoIf($$[$0-3], [], this.$.first_line, this.$.first_column+1) 
break;
case 58:
 this.$ = new Instruccion.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 59:
 this.$ = new Instruccion.nuevoIfElse($$[$0-7], [], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 60:
 this.$ = new Instruccion.nuevoIfElse($$[$0-7], $$[$0-4], [], this.$.first_line, this.$.first_column+1) 
break;
case 61:
 this.$ = new Instruccion.nuevoIfElse($$[$0-6], [], [], this.$.first_line, this.$.first_column+1) 
break;
case 62:
 this.$ = new Instruccion.nuevoElseIf($$[$0-6], $$[$0-3], $$[$0], this.$.first_line, this.$.first_column+1) 
break;
case 63:
 this.$ = new Instruccion.nuevoElseIf($$[$0-5], [], [], this.$.first_line, this.$.first_column+1) 
break;
case 64:
 this.$ = new Instruccion.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this.$.first_line, this.$.first_column+1)  
break;
case 65:
 this.$ = new Instruccion.nuevoSwitch($$[$0-4], $$[$0-1], null, this.$.first_line, this.$.first_column+1) 
break;
case 66:
 this.$ = new Instruccion.nuevoSwitch($$[$0-4], null, $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 67:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de Switch no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 68:
 $$[$0-4].push(new Instruccion.nuevoCaso($$[$0-2], $$[$0], this.$.first_line, this.$.first_column+1)); this.$=$$[$0-4]; 
break;
case 69:
 $$[$0-3].push(new Instruccion.nuevoCaso($$[$0-1], [], this.$.first_line, this.$.first_column+1)); this.$=$$[$0-3]; 
break;
case 70:
 this.$ = [new Instruccion.nuevoCaso($$[$0-2], $$[$0], this.$.first_line, this.$.first_column+1)]; 
break;
case 71:
 $ = [new Instruccion.nuevoCaso($$[$0-1], [], this.$.first_line, this.$.first_column+1)]; 
break;
case 72:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de caso no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 73:
 this.$ = new Instruccion.nuevoCaso(null, $$[$0], this.$.first_line, this.$.first_column+1); 
break;
case 74:
 this.$ = new Instruccion.nuevoCaso(null, [], this.$.first_line, this.$.first_column+1); 
break;
case 78:
 this.$ = new Instruccion.nuevoWhile($$[$0-4], $$[$0-1], this.$.first_line,this.$.first_column+1) 
break;
case 79:
 this.$ = new Instruccion.nuevoWhile($$[$0-3], [], this.$.first_line,this.$.first_column+1) 
break;
case 80:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de ciclo While no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 81:
 this.$ = new Instruccion.nuevoDoWhile($$[$0-2], $$[$0-6], this.$.first_line,this.$.first_column+1) 
break;
case 82:
 this.$ = new Instruccion.nuevoDoWhile($$[$0-1], [], this.$.first_line,this.$.first_column+1) 
break;
case 83:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de sentencia Do-While no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 84:
 $$[$0-1].push($$[$0-4]); this.$ = new Instruccion.nuevoFor($$[$0-7], $$[$0-6], $$[$0-1], this.$.first_line,this.$.first_column+1) 
break;
case 85:
 this.$ = new Instruccion.nuevoFor($$[$0-6], $$[$0-5], [$$[$0-3]], this.$.first_line,this.$.first_column+1) 
break;
case 86:
this.$ = new Instruccion.nuevoFor($$[$0-5], $$[$0-3], $$[$0-1], this.$.first_line,this.$.first_column+1)
break;
case 87:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de ciclo For no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 88:
 this.$ = Instruccion.nuevaAsignacion($$[$0-2], $$[$0], this.$.first_line,this.$.first_column+1) 
break;
case 89:
 this.$ = Instruccion.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this.$.first_line, columna: this.$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this.$.first_line, columna: this.$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this.$.first_column+1 }, this.$.first_line,this._$.first_column+1) 
break;
case 90:
 this.$ = Instruccion.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this.$.first_line, columna: this.$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this.$.first_line, columna: this.$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this.$.first_column+1 }, this.$.first_line,this._$.first_column+1) 
break;
case 91:
 this.$ = new Instruccion.nuevoBreak(this.$.first_line, this.$.first_column+1) 
break;
case 92:
 this.$ = new Instruccion.nuevoReturn(null, this.$.first_line, this.$.first_column+1) 
break;
case 93:
 this.$ = new Instruccion.nuevoContinue(this.$.first_line, this.$.first_column+1) 
break;
case 94:
 this.$ = new Instruccion.nuevoReturn($$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 95: case 96: case 97: case 98: case 99: case 100:
 this.$ = new Instruccion.nuevoImprimir($$[$0-2], this.$.first_line,this.$.first_column+1); 
break;
case 101: case 102:
  this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Llamada a función imprimir no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 103: case 111:
 this.$ = Instruccion.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this.$.first_line,this.$.first_column+1) 
break;
case 104:
 this.$ = Instruccion.nuevaDeclaracion($$[$0-3], [$$[$0-1]], $$[$0-4], this.$.first_line,this.$.first_column+1) 
break;
case 105:
 this.$ = Instruccion.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this.$.first_line,this.$.first_column+1) 
break;
case 106:
 this.$ = Instruccion.nuevaAsignacion($$[$0-3], $$[$0-1], this.$.first_line,this.$.first_column+1) 
break;
case 107:
 this.$ = Instruccion.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this.$.first_line, columna: this.$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this.$.first_line, columna: this.$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this.$.first_column+1 }, this.$.first_line,this._$.first_column+1) 
break;
case 108:
 this.$ = Instruccion.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this.$.first_line, columna: this.$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this.$.first_line, columna: this.$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this.$.first_column+1 }, this.$.first_line,this._$.first_column+1) 
break;
case 109:
 this.$ = Instruccion.nuevaDeclaracion($$[$0], null, $$[$0-1], this.$.first_line,this.$.first_column+1) 
break;
case 110:
 this.$ = Instruccion.modificacionVector($$[$0-6], $$[$0-4], $$[$0-1], this.$.first_line, this.$.first_column+1) 
break;
case 112:
 this.$ = ""; errores.push({ tipo: "Sintactico", error: "Declaracion de variable incorrecta", linea: this.$.first_line, columna: this.$.first_column+1 }); console.log(errores) 
break;
case 113:
 this.$ = Instruccion.nuevoVector($$[$0-8], null, $$[$0-5], null, $$[$0-2], null, this.$.first_line, this.$.first_column+1) 
break;
case 114:
 this.$ = Instruccion.nuevoVector($$[$0-7], null, $$[$0-4], null, null, null, this.$.first_line, this.$.first_column+1) 
break;
case 115:
  
break;
case 118:
this.$ = new Instruccion.nuevoLength($$[$0-3], this.$.first_line,this.$.first_column+1)
break;
case 122:
 this.$ = ""; errores.push({ tipo: "Sintáctico", error: "Declaración de vector no válida.", linea: this.$.first_line, columna: this.$.first_column+1 }); 
break;
case 151:
 this.$ = Instruccion.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 152:
 this.$ = Instruccion.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column+1) 
break;
case 158:
this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.CADENA, this.$.first_line,this.$.first_column+1)
break;
case 159:
this.$ = Instruccion.nuevoValor($$[$0].trim().substring(1, $$[$0].length - 1), TIPO_VALOR.CARACTER, this.$.first_line,this.$.first_column+1)
break;
case 160: case 161:
this.$ = Instruccion.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEAN, this.$.first_line,this.$.first_column+1)
break;
case 162:
this.$ = Instruccion.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this.$.first_line,this.$.first_column+1)
break;
case 163:
this.$ = Instruccion.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this.$.first_line,this.$.first_column+1)
break;
case 164:
this.$ = Instruccion.nuevoValor($$[$0], TIPO_VALOR.NULL, this.$.first_line,this.$.first_column+1)
break;
case 165:
this.$ = Instruccion.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this.$.first_line,this.$.first_column+1)
break;
case 166:
this.$=$$[$0-1];
break;
case 167:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this.$.first_line,this.$.first_column+1); 
break;
case 168:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this.$.first_line,this.$.first_column+1);
break;
case 169:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this.$.first_line,this.$.first_column+1);
break;
case 170:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this.$.first_line,this.$.first_column+1);
break;
case 171:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this.$.first_line,this.$.first_column+1);
break;
case 172:
this.$= Instruccion.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.POTENCIA,this.$.first_line,this.$.first_column+1); 
break;
case 173:
 this.$= Instruccion.nuevaOperacionBinaria(null,$$[$0-1], TIPO_OPERACION.RAIZ,this.$.first_line,this.$.first_column+1);
break;
case 174:
 this.$= Instruccion.nuevaOperacionBinaria(null,$$[$0-1], TIPO_OPERACION.SENO,this.$.first_line,this.$.first_column+1);
break;
case 175:
 this.$= Instruccion.nuevaOperacionBinaria(null,$$[$0-1], TIPO_OPERACION.COSENO,this.$.first_line,this.$.first_column+1);
break;
case 176:
 this.$= Instruccion.nuevaOperacionBinaria(null,$$[$0-1], TIPO_OPERACION.TANGETE,this.$.first_line,this.$.first_column+1);
break;
case 177:
 this.$= Instruccion.nuevaOperacionBinaria(null,$$[$0-1], TIPO_OPERACION.LOGARITMO,this.$.first_line,this.$.first_column+1);
break;
case 178:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this.$.first_line,this.$.first_column+1); 
break;
case 179:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this.$.first_line,this.$.first_column+1); 
break;
case 180:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this.$.first_line,this.$.first_column+1); 
break;
case 181:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this.$.first_line,this.$.first_column+1); 
break;
case 182:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this.$.first_line,this.$.first_column+1) 
break;
case 183:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this.$.first_line,this.$.first_column+1); 
break;
case 184:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this.$.first_line,this.$.first_column+1); 
break;
case 185:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this.$.first_line,this.$.first_column+1);  
break;
case 186:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this.$.first_line,this.$.first_column+1); 
break;
case 189: case 190:
 this.$=$$[$0]; 
break;
case 191:
this.$=$$[$0];
break;
case 192: case 193: case 194:
 
break;
case 195:
 this.$= Instruccion.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this.$.first_line,this.$.first_column+1); 
break;
case 196:
 this.$ = new Instruccion.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 205:
 this.$ = new Instruccion.nuevoLength($$[$0-4], this._$.first_line,this._$.first_column+1) 
break;
case 206:
 this.$ = new Instruccion.toLower($$[$0-4], this._$.first_line,this._$.first_column+1) 
break;
case 207:
 this.$ = new Instruccion.toUpper($$[$0-4], this._$.first_line,this._$.first_column+1) 
break;
case 208:
 this.$ = new Instruccion.nuevoTypeOf($$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 211:
 this.$ = new Instruccion.nuevoToString($$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 212:
 this.$ = new Instruccion.nuevoCasteo($$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 213:
 this.$ = new Instruccion.nuevoCasteo("ENTERO", $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 214:
 this.$ = new Instruccion.nuevoCasteo("DOBLE", $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 215:
 this.$ = TIPO_DATO.CADENA; 
break;
case 216:
 this.$ = TIPO_DATO.ENTERO; 
break;
case 217: case 219:
 this.$ = TIPO_DATO.DOBLE; 
break;
case 218:
 this.$ = TIPO_DATO.CARACTER; 
break;
case 220:
 this.$ = TIPO_DATO.BOOLEAN; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,14:$V0,21:11,22:$V1,26:$V2,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{1:[3]},{5:[1,21],6:22,7:5,8:6,9:7,10:8,11:9,12:10,14:$V0,21:11,22:$V1,26:$V2,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{5:[1,23]},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{13:[1,24]},{2:[1,26],22:[1,25],24:[1,27]},{2:[1,29],15:[1,30],22:[1,28]},{16:[1,38],22:[1,37],24:$Va,28:$Vb,29:[1,35],60:$Vc,61:$Vd,69:$Ve,73:36,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{22:[1,46]},o($Vl,[2,215]),o($Vl,[2,216]),o($Vl,[2,217]),o($Vl,[2,218]),o($Vl,[2,219]),o($Vl,[2,220]),{1:[2,1]},o($V9,[2,3]),{1:[2,2]},o($V9,[2,10]),o($V9,$Vm,{13:$Vn,16:[1,47],28:$Vo}),{13:$Vp,20:[1,50]},{25:[1,52]},{16:[1,53]},{20:[1,54]},{2:[1,56],16:[1,55]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:57,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{13:[1,92]},{13:[1,93]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:94,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{22:[1,98],70:$VM,71:$VN,72:[1,97]},o($VO,[2,121]),{28:[1,99]},{16:$Vq,17:[1,101],21:103,22:$VP,23:100,24:$Vs,30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{74:106,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU},{69:[1,112]},{69:[1,113]},{69:[1,114]},{69:[1,115]},{69:[1,116]},{69:[1,117]},{18:[1,118]},{16:$Vq,17:[1,119],21:103,22:$VP,23:120,24:$Vs,30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:[1,125],24:$Vs,30:121,67:123,68:[1,122],75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$VV,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VW,[2,105]),o($V9,[2,17]),o($VW,[2,112]),{2:[1,126],22:$VX},{16:$Vq,17:[1,128],21:103,22:$VP,23:129,24:$Vs,30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($V9,[2,23]),{17:[1,130]},{20:[1,131]},{13:[1,132],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($Va1,$Vb1),o($Va1,[2,159]),o($Va1,[2,160]),o($Va1,[2,161]),o($Va1,$Vc1),o($Va1,[2,163]),o($Va1,[2,164]),o($Va1,$Vd1,{24:$Ve1,29:$Vf1}),{16:$Vq,21:89,22:$Vr,24:$Vs,30:149,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:[1,150]},{16:[1,151]},{16:[1,152]},{16:[1,153]},{16:[1,154]},{16:[1,155]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:156,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:157,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,189]),o($Va1,[2,190]),o($Va1,[2,191]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:158,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,197]),o($Va1,[2,198]),o($Va1,[2,199]),o($Va1,[2,200]),o($Va1,[2,201]),o($Va1,[2,202]),o($Va1,[2,209]),o($Va1,[2,210]),{16:[1,159]},{16:[1,160]},{29:$Vg1},{16:[1,162]},{16:[1,163]},o($VW,[2,107]),o($VW,[2,108]),{25:[1,164],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{16:[1,165]},{16:[1,166]},{16:[1,167]},{28:[1,168]},{22:[1,169]},{17:[1,170],32:$Vh1},{13:[2,152]},o($Vi1,[2,32]),{22:[1,173],24:[1,172],29:$Vg1},o([17,25,32,85,86,87,88,89,95,96,97,98,99,100,101,102,109],$Vd1,{22:[1,174],24:$Ve1,29:$Vf1}),o($Vi1,[2,37],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91}),{16:$Vq,21:89,22:$Vr,24:$Vs,30:175,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Vj1,[2,153]),o($Vj1,[2,154]),o($Vj1,[2,155]),o($Vj1,[2,156]),o($Vj1,[2,157]),{16:[1,176]},{16:[1,177]},{16:[1,178]},{16:[1,179]},{16:[1,180]},{16:[1,181]},{9:184,21:186,22:$Vk1,27:182,31:183,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{18:[1,187]},{17:[1,188],32:$Vh1},{13:[1,189],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{13:[1,190]},{13:[1,191],32:$Vl1,82:$Vm1,83:$Vn1},o([13,17,85,86,87,88,89,95,96,97,98,99,100,101,102,109],$Vb1,{82:[1,195],83:[1,196]}),o([13,85,86,87,88,89,95,96,97,98,99,100,101,102,109],$Vd1,{24:$Ve1,29:$Vf1,32:$Vo1}),{13:$Vp1,20:[1,198]},{28:[1,200]},{18:[1,201]},{17:[1,202],32:$Vh1},{18:[1,203]},o($V9,[2,12]),o($VW,[2,106]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:204,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:205,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:206,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:207,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:208,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:209,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:210,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:211,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:212,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:213,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:214,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:215,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:216,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:217,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:218,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:[1,219],86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,107:[1,220],110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{72:[1,223],116:$Vq1,117:$Vr1,118:$Vs1,119:$Vt1},{17:[1,226],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{16:$Vq,21:89,22:$Vr,24:$Vs,30:227,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:228,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:229,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:230,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:231,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:232,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Vu1,[2,186],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,102:$V81}),{25:[1,233],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($Va1,[2,195]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:234,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:235,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{124:[1,236]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:237,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:238,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{28:[1,239]},{16:$Vq,21:103,22:$VP,23:240,24:$Vs,30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{17:[1,241]},{17:[1,242]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:243,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:[1,244]},{13:[2,151]},{16:$Vq,21:103,22:$VP,24:$Vs,30:105,33:245,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{25:[1,246]},o($Vi1,[2,35]),o($Vi1,[2,36]),o($Vv1,[2,123],{73:247,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk,85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91}),{22:[1,248],69:$Ve,73:249,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{22:[1,250],69:$Ve,73:251,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{22:[1,252],69:$Ve,73:253,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{22:[1,254],69:$Ve,73:255,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:$Vq,21:89,22:$Vr,24:$Vs,30:256,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{69:$Ve,73:257,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{20:[1,258]},{20:[2,28],32:[1,259]},o($Vw1,[2,30]),{22:[1,260],24:$Va,28:$Vb,60:$Vc,61:$Vd},{2:$Vx1,22:$Vy1},{2:$Vz1,9:266,10:272,11:271,12:273,19:263,20:[1,264],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{18:[1,294]},o($VW,[2,103]),o($VW,[2,104]),o($VW,[2,111]),{81:[1,295]},{84:[1,296]},{22:[1,297]},{81:[1,298]},{84:[1,299]},{22:[1,300]},o($V9,[2,18]),o($VO,[2,122]),{22:[1,303],24:[1,301],69:[1,302],73:304,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{2:$Vz1,9:266,10:272,11:271,12:273,19:305,20:[1,306],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{18:[1,307]},{2:$Vz1,9:266,10:272,11:271,12:273,19:308,21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VK1,[2,167],{87:$V_,88:$V$,89:$V01}),o($VK1,[2,168],{87:$V_,88:$V$,89:$V01}),o($Va1,[2,169]),o($Va1,[2,170]),o($Va1,[2,171]),o($VL1,[2,178],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),o($VL1,[2,179],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),o($VL1,[2,180],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),o($VL1,[2,181],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),o($VL1,[2,182],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),o([2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,100,109,127,128,129,130,131,132],[2,183],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,101:$V71,102:$V81}),o($Vu1,[2,184],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,102:$V81}),o($VL1,[2,185],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01}),{50:[1,309],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{25:[1,310],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o([25,85,86,87,88,89,95,96,97,98,99,100,101,102,109],$Vc1,{50:[1,311]}),{50:[1,312]},{16:[1,313]},{16:[1,314]},{16:[1,315]},{16:[1,316]},{16:[1,317]},o($Va1,[2,166]),{32:[1,318],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,319],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,320],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,321],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,322],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,323],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($Va1,[2,188]),{17:[1,324],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,325],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{16:[1,326]},{17:[1,327],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,328],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{16:$Vq,21:89,22:$Vr,24:$Vs,30:329,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{17:[1,330],32:$Vh1},{13:[1,331]},{13:$VM1},{13:[1,333],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{16:$Vq,17:[1,335],21:103,22:$VP,23:334,24:$Vs,30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Vi1,[2,33]),{22:[1,336]},o($Vv1,[2,124]),{17:[1,337]},{17:[1,338]},{17:[1,339]},{17:[1,340]},{17:[1,341]},{17:[1,342]},{17:[1,343]},{17:[1,344]},{32:[1,345],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,346]},{13:[1,347]},{9:184,21:186,22:$Vk1,27:348,31:183,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Vw1,[2,31]),o([2,16,20,22,24,26,32,44,46,49,51,55,56,57,62,63,64,65,66,75,76,77,78,79,80,81,84,86,90,91,92,93,94,103,120,123,125,126,127,128,129,130,131,132],$Vm,{13:$Vn,28:$Vo}),{13:$Vp},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,349],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($V9,[2,16]),o($VN1,[2,39]),o($VN1,[2,40]),o($VN1,[2,41]),o($VN1,[2,42]),o($VN1,[2,43]),o($VN1,[2,44]),o($VN1,[2,45]),o($VN1,[2,46]),{13:[1,351]},{13:[1,352],20:[1,353]},{2:$Vx1,22:$Vy1,24:$VO1},{2:[1,356],16:[1,355]},{2:[1,358],16:[1,357]},o($VN1,[2,50]),o($VN1,[2,51]),o($VN1,[2,75]),o($VN1,[2,76]),o($VN1,[2,77]),{13:[1,359]},{13:[1,360],16:$Vq,21:89,22:$Vr,24:$Vs,30:361,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{13:[1,362]},o($VN1,[2,52]),o($VN1,[2,53]),o($VN1,[2,54]),{2:[1,363],16:[1,364]},{2:[1,366],16:[1,365]},{2:[1,368],16:[1,367]},{2:[1,371],16:[1,369],22:[1,370]},{2:[1,373],18:[1,372]},{2:$Vz1,9:266,10:272,11:271,12:273,19:374,20:[1,375],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VP1,[2,146]),o($VP1,[2,148]),o($VP1,[2,150]),o($VP1,[2,145]),o($VP1,[2,147]),o($VP1,[2,149]),{16:$Vq,21:103,22:$VP,23:376,24:$Vs,25:[1,377],30:105,33:102,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{22:[1,378],74:106,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU},{69:$Ve,73:379,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{13:[1,380]},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,381],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($V9,[2,22]),{2:$Vz1,9:266,10:272,11:271,12:273,19:382,20:[1,383],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,384],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:385,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,187]),{84:[1,386],108:[1,387]},{84:[1,388]},{84:[1,389]},{84:[1,390]},{17:[1,391]},{17:[1,392]},{17:[1,393]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:394,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,173]),o($Va1,[2,174]),o($Va1,[2,175]),o($Va1,[2,176]),o($Va1,[2,177]),o($Va1,[2,211]),o($Va1,[2,208]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:395,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,213]),o($Va1,[2,214]),{13:[1,396],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{13:[1,397]},o($VO,[2,117]),o($VO,[2,118]),o($VQ1,[2,27]),{17:[1,398],32:$Vh1},{13:[1,399]},o($Vi1,[2,34]),o($Vv1,[2,125],{73:400,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,128],{73:401,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,129],{73:402,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,132],{73:403,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,133],{73:404,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,136],{73:405,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,137],{73:406,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($Vv1,[2,140],{73:407,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),{22:[1,408],69:$Ve,73:409,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vv1,[2,144]),o($VQ1,[2,24]),{20:[2,29]},o($V9,[2,13]),o($VN1,[2,38]),o($VN1,[2,47]),o($VN1,[2,48]),o($VN1,[2,49]),{25:[1,410]},{10:412,16:$Vq,21:415,22:$VR1,24:$Vs,30:411,67:413,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$VV,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{13:[1,416]},{10:418,16:$Vq,21:415,22:$VR1,24:$Vs,30:417,67:419,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$VV,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{13:[1,420]},o($VN1,[2,91]),o($VN1,[2,92]),{13:[1,421],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VN1,[2,93]),{20:[1,422]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:423,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:424,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{20:[1,425]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:426,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{20:[1,427]},{9:428,21:186,22:[1,429],127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{59:[1,430]},{20:[1,431]},{2:$Vz1,9:266,10:272,11:271,12:273,19:432,20:[1,433],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{13:[1,434]},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,435],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($V9,[2,15]),{25:[1,436],32:$Vh1},{13:[1,437]},{13:[1,438]},{13:[1,439]},o($VO,[2,120]),o($V9,[2,19]),{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,440],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($V9,[2,21]),o($V9,[2,11]),o([2,5,13,14,17,18,20,22,25,26,32,44,46,49,50,51,55,56,57,62,63,64,65,66,69,75,76,77,78,79,80,109,127,128,129,130,131,132],[2,196],{85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81}),{25:[1,441]},{25:[1,442]},{25:[1,443]},{17:[1,444]},{32:[1,445]},o($Va1,$VS1),o($Va1,[2,206]),o($Va1,[2,207]),{17:[1,446],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,447],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VW,[2,110]),o($VO,[2,116]),{13:[1,448]},o($VQ1,[2,26]),o($Vv1,[2,126]),o($Vv1,[2,127]),o($Vv1,[2,130]),o($Vv1,[2,131]),o($Vv1,[2,134]),o($Vv1,[2,135]),o($Vv1,[2,138]),o($Vv1,[2,139]),{17:[1,450],69:$Ve,73:449,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{17:[1,451]},{2:[1,452],22:$VX},{17:[1,453],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,454]},{17:[1,455],32:$Vl1,82:$Vm1,83:$Vn1},o($VT1,$Vd1,{73:36,24:$Ve1,29:[1,456],32:$Vo1,69:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),{24:$VO1,29:$Vg1},o($VN1,[2,101]),{17:[1,457],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,458]},{17:[1,459],32:$Vl1,82:$Vm1,83:$Vn1},o($VN1,[2,102]),o($VN1,[2,94]),o($VN1,[2,55]),{17:[1,460],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{17:[1,461],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VN1,[2,67]),{17:[1,462],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VN1,[2,80]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:463,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{24:$Va,28:$Vb,60:$Vc,61:$Vd},{16:$Vq,21:89,22:$Vr,24:$Vs,30:464,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,87]),{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,465],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{55:[1,466]},o($VN1,[2,83]),o($V9,[2,14]),{13:[1,467]},o($VO,[2,114]),o($VO,[2,115]),o($VO,[2,119]),o($V9,[2,20]),o($Va1,[2,192]),o($Va1,[2,194]),o($Va1,[2,193]),o($Va1,[2,203]),{84:[1,468]},o($Va1,[2,172]),o($Va1,[2,212]),o($VQ1,[2,25]),{17:[1,469]},o($Vv1,[2,142]),o($Vv1,[2,143]),{13:$Vp1},{13:[1,470]},{13:[1,471]},{13:[1,472]},{70:$VM,71:$VN,72:[1,473],116:$Vq1,117:$Vr1,118:$Vs1,119:$Vt1},{13:[1,474]},{13:[1,475]},{13:[1,476]},{18:[1,477]},{18:[1,478]},{18:[1,479]},{13:[1,480],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{18:[1,481],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{55:[1,482]},{16:[1,483]},o($VO,[2,113]),{17:[1,484]},o($Vv1,[2,141]),o($VN1,[2,95]),o($VN1,[2,97]),o($VN1,[2,99]),{16:[1,485]},o($VN1,[2,96]),o($VN1,[2,98]),o($VN1,[2,100]),{2:$Vz1,9:266,10:272,11:271,12:273,19:486,20:[1,487],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{47:488,48:489,49:[1,490],51:$VU1},{2:$Vz1,9:266,10:272,11:271,12:273,19:492,20:[1,493],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{22:[1,495],58:494},{2:$Vz1,9:266,10:272,11:271,12:273,19:496,21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:[1,497]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:498,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($Va1,[2,204]),{17:[1,499]},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,500],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,57],{45:[1,501]}),{20:[1,503],48:502,49:[1,504],51:$VU1},{20:[1,505]},{2:[1,507],16:$Vq,21:89,22:$Vr,24:$Vs,30:506,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{50:[1,508]},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,509],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,79]),{17:[1,510]},{28:[1,511],60:[1,512],61:[1,513]},{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,514],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{16:$Vq,21:89,22:$Vr,24:$Vs,30:515,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{17:[1,516],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VT1,$VS1,{13:$VM1}),o($VN1,[2,56],{45:[1,517]}),{18:[1,518],39:519,41:286,42:287,43:288,44:$VA1},{20:[1,520]},o($VN1,[2,65]),{16:$Vq,21:89,22:$Vr,24:$Vs,30:521,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,66]),{50:[1,522],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{50:[1,523]},{2:$Vz1,9:266,10:272,11:271,12:273,19:524,20:[2,74],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,78]),{18:[1,525]},{16:$Vq,21:89,22:$Vr,24:$Vs,30:526,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,84:$VA,86:$VB,90:$VC,91:$VD,92:$VE,93:$VF,94:$VG,103:$VH,104:75,105:76,106:77,110:79,111:80,112:81,113:82,114:83,115:84,120:$VI,121:85,122:86,123:$VJ,125:$VK,126:$VL,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{17:[2,89]},{17:[2,90]},o($VN1,[2,86]),{17:[1,527],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{13:[1,528]},{18:[1,529],39:530,41:286,42:287,43:288,44:$VA1},{2:$Vz1,9:266,10:272,11:271,12:273,19:531,20:[1,532],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,63]),o($VN1,[2,64]),{50:[1,533],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},o($VV1,[2,71],{34:265,9:266,35:267,36:268,37:269,38:270,11:271,10:272,12:273,21:275,39:278,40:279,52:280,53:281,54:282,41:286,42:287,43:288,19:534,2:$Vz1,22:$V1,26:$V2,44:$VA1,46:$VB1,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8}),o($VV1,[2,72]),{2:$Vz1,9:266,10:272,11:271,12:273,20:[2,73],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{2:$Vz1,9:266,10:272,11:271,12:273,19:535,20:[1,536],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},{17:[2,88],85:$VY,86:$VZ,87:$V_,88:$V$,89:$V01,95:$V11,96:$V21,97:$V31,98:$V41,99:$V51,100:$V61,101:$V71,102:$V81,109:$V91},{13:[1,537]},o($VN1,[2,82]),{2:$Vz1,9:266,10:272,11:271,12:273,19:538,20:[1,539],21:275,22:$V1,26:$V2,34:265,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,62]),{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,540],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,61]),o($VV1,[2,69],{34:265,9:266,35:267,36:268,37:269,38:270,11:271,10:272,12:273,21:275,39:278,40:279,52:280,53:281,54:282,41:286,42:287,43:288,19:541,2:$Vz1,22:$V1,26:$V2,44:$VA1,46:$VB1,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8}),o($VV1,[2,70],{9:266,35:267,36:268,37:269,38:270,11:271,10:272,12:273,21:275,39:278,40:279,52:280,53:281,54:282,41:286,42:287,43:288,34:350,2:$Vz1,22:$V1,26:$V2,44:$VA1,46:$VB1,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8}),{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,542],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,85]),o($VN1,[2,81]),{2:$Vz1,9:266,10:272,11:271,12:273,20:[1,543],21:275,22:$V1,26:$V2,34:350,35:267,36:268,37:269,38:270,39:278,40:279,41:286,42:287,43:288,44:$VA1,46:$VB1,52:280,53:281,54:282,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8},o($VN1,[2,60]),o($VN1,[2,59]),o($VV1,[2,68],{9:266,35:267,36:268,37:269,38:270,11:271,10:272,12:273,21:275,39:278,40:279,52:280,53:281,54:282,41:286,42:287,43:288,34:350,2:$Vz1,22:$V1,26:$V2,44:$VA1,46:$VB1,55:$VC1,56:$VD1,57:$VE1,62:$VF1,63:$VG1,64:$VH1,65:$VI1,66:$VJ1,127:$V3,128:$V4,129:$V5,130:$V6,131:$V7,132:$V8}),o($VN1,[2,84]),o($VN1,[2,58])],
defaultActions: {21:[2,1],23:[2,2],101:[2,152],170:[2,151],348:[2,29],512:[2,89],513:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena = '';
    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentarios de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 129
break;
case 4:return 128
break;
case 5:return 132
break;
case 6:return 130
break;
case 7:return 131
break;
case 8:return 127
break;
case 9:return 94
break;
case 10:return 44
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 49
break;
case 14:return 62
break;
case 15:return 51
break;
case 16:return 55
break;
case 17:return 57
break;
case 18:return 56
break;
case 19:return 64
break;
case 20:return 63
break;
case 21:return 14
break;
case 22:return 15
break;
case 23:return 60
break;
case 24:return 61
break;
case 25:return 59
break;
case 26:return 79
break;
case 27:return 80
break;
case 28:return 75
break;
case 29:return 76
break;
case 30:return 77
break;
case 31:return 78
break;
case 32:return 91
break;
case 33:return 92
break;
case 34:return 100
break;
case 35:return 101
break;
case 36:return 102
break;
case 37:return 95
break;
case 38:return 103
break;
case 39:return 28
break;
case 40:return 97
break;
case 41:return 99
break;
case 42:return 98
break;
case 43:return 96
break;
case 44:return 82
break;
case 45:return "OPERACIONESALIMPRIMIR"
break;
case 46:return "OP_VECOTRES"
break;
case 47:return 32
break;
case 48:return 13
break;
case 49:return 29
break;
case 50:return 50
break;
case 51:return 88
break;
case 52:return 87
break;
case 53:return 86
break;
case 54:return 85
break;
case 55:return 83
break;
case 56:return 89
break;
case 57:return 109
break;
case 58:return 16
break;
case 59:return 17
break;
case 60:return 18
break;
case 61:return 20
break;
case 62:return 24
break;
case 63:return 25
break;
case 64:return 116
break;
case 65:return 117
break;
case 66:return 118
break;
case 67:return 119
break;
case 68:return 72
break;
case 69:return 65
break;
case 70:return 66
break;
case 71:return 124
break;
case 72:return 125
break;
case 73:return 126
break;
case 74:return 123
break;
case 75:return 120
break;
case 76:return 26
break;
case 77:return 107
break;
case 78:return 108
break;
case 79:return 70
break;
case 80:return 71
break;
case 81:return 'TK_FUNCTION'
break;
case 82:return 22
break;
case 83:return 90
break;
case 84:return 93
break;
case 85:return 84
break;
case 86: cadena = ''; this.begin("string"); 
break;
case 87: cadena += yy_.yytext; 
break;
case 88: cadena += "\""; 
break;
case 89: cadena += "\n"; 
break;
case 90: cadena += " ";  
break;
case 91: cadena += "\t"; 
break;
case 92: cadena += "\\"; 
break;
case 93: cadena += "\'"; 
break;
case 94: cadena += "\r"; 
break;
case 95: yy_.yytext = cadena; this.popState(); return 81; 
break;
case 96:return 5
break;
case 97: errores.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:double\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:String\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:in\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&)/,/^(?:\$)/,/^(?:#)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:length\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:struct\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:\\r)/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[87,88,89,90,91,92,93,94,95],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}